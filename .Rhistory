if (tests) {
definite_names <- c(definite_names,"p value")
}
colnames(rslt) <- definite_names
definite_names
overall_count
overall_observations
if (overall) {
coloverall <- paste("Overall",overall_observations,sep = "\nN = ")
definite_names <- c("characteristics",coloverall,colsy)
} else {
definite_names <- c("characteristics",colsy)
}
if (tests) {
definite_names <- c(definite_names,"p value")
}
colnames(rslt) <- definite_names
colnames(rslt)
definite_names
colsy
rslt <- flextable(rslt, col_keys = colnames(rslt))
rslt
devtools::load_all(".")
format_data(DF) ->DF
DF$`ATB 1ère ligne`[DF$`ATB 1ère ligne` != "non"] <- "oui"
autostats::table1(DF[,c(1:14,65)],y = "ATB 1ère ligne",exit="html",overall = TRUE,test = TRUE)
autostats::table1(DF[,c(1:14,65)],y = "ATB 1ère ligne",exit="html",overall = FALSE,test = TRUE)
autostats::table1(DF[,c(1:14,65)],y = "ATB 1ère ligne",exit="html",overall = FALSE,test = FALSE)
autostats::table1(DF[,c(1:14,65)],y = "ATB 1ère ligne",exit="html",overall = TRUE,test = FALSE)
autostats::table1(DF[,c(1:14,65)],y = "ATB 1ère ligne",exit="html",overall = FALSE,test = FALSE)
devtools::load_all(".")
format_data(DF) ->DF
DF$`ATB 1ère ligne`[DF$`ATB 1ère ligne` != "non"] <- "oui"
autostats::table1(DF[,c(1:14,65)],y = "ATB 1ère ligne",exit="html",overall = FALSE,test = FALSE)
devtools::load_all(".")
format_data(DF) ->DF
#DF$`ATB 1ère ligne`[DF$`ATB 1ère ligne` != "non"] <- "oui"
autostats::table1(DF[,c(1:14,65)],y = "ATB 1ère ligne",exit="html",overall = FALSE,test = FALSE)
source('~/MEGA/ARTICLES/Packages/autostats/R/table1.R')
devtools::load_all(".")
format_data(DF) ->DF
#DF$`ATB 1ère ligne`[DF$`ATB 1ère ligne` != "non"] <- "oui"
autostats::table1(DF[,c(1:14,65)],y = "ATB 1ère ligne",exit="html",overall = FALSE,test = FALSE)
autostats::table1(DF[,c(1:14,65)],y = "ATB 1ère ligne",exit="html",overall = FALSE,test = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(autostats)
library(kableExtra)
set.seed(2)
prob_inf = 0.2
prob_sup = 0.8
### SIMULATION OF A DATASET (WITHOUT Y)
simulate_dataset <- function(
N=300,#number of row in the dataset
n_variables=5,#number of variable to simulate
n_variables_num = 0 #number of numeric variable
)
{
# construction of variables
variables_list = list()
vect_proba = vector()
#Construction of numeric variables
if (n_variables_num > 0)
{
for (i in seq(n_variables_num))
{
variables_list[[i]] <- rnorm(N,mean = 0,1)
}
} else {
i = 1
}
# other variables
for (j in i:(n_variables-1))
{
modalities <- 2 # number of modalities in each variable
proba <- runif(1) # generation of the binomial parameter 'proba' according to a uniform law
vect_proba[j] <- proba
variables_list[[j]] <- rbernoulli(N,proba) # generation of the values of the variable (the columns of the dataset)
}
j <- j+1
variables_list[[j]] <- rbernoulli(N,variables_list[[j-1]])
DF <- matrix(nrow = N,ncol = n_variables)
for (ncol in seq(n_variables))
{
variables_list[[ncol]] -> DF[,ncol] # generation of the dataset by binding the columns of the variables
}
as.data.frame(DF) -> DF
reslt <- list()
DF -> reslt$DF
vect_proba -> reslt$probas
return(reslt)
}
# Meaningful variables
simulation1 <- simulate_dataset(100,5,0)
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
y_var = vector()
while (prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(ncol(simulation1$DF)))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[ ,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob = mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n + 1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
cat(paste0("intercept = ",intercept))
n <-  n + 1
}
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
DF <- cbind(y_var, simulation1$DF)
# Not meningful factors
simulate_dataset(100,3)$DF -> DF2
colnames(DF2) <- c("interact1","interact2","interact3")
#Bind all variables
cbind(DF,DF2) -> DF
DF %>% kable() %>%
kable_styling(fixed_thead = T,bootstrap_options = c("striped", "hover", "condensed")) %>% scroll_box(height = '200px')
DF
DF %>% kable() %>%
kable_styling(fixed_thead = T,bootstrap_options = c("striped", "hover", "condensed")) %>% scroll_box(height = '200px')
ncoll(DF)
ncol(DF)
nrow(DF)
rnorm(100,mean = 60,sd=10)
round(rnorm(100,mean = 60,sd=10),0)
weight <- round(rnorm(100,mean = 70,sd=30),0)
weight
weight <- round(rnorm(100,mean = 70,sd=20),0)
weight
weight[weight < 45] <- 53
weight
DF
colnames(DF) <- c("desease","smoker","worker","exposed","cancer","heart desease","gluten free diet","anxiety","depression")
DF
DF <- cbind(DF,weight,age)
#
#
age <- round(rnorm(100,mean = 60,sd = 10),0)
DF <- cbind(DF,weight,age)
DF
# Meaningful variables
simulation1 <- simulate_dataset(245,5,0)
set.seed(2)
prob_inf = 0.2
prob_sup = 0.8
### SIMULATION OF A DATASET (WITHOUT Y)
simulate_dataset <- function(
N=300,#number of row in the dataset
n_variables=5,#number of variable to simulate
n_variables_num = 0 #number of numeric variable
)
{
# construction of variables
variables_list = list()
vect_proba = vector()
#Construction of numeric variables
if (n_variables_num > 0)
{
for (i in seq(n_variables_num))
{
variables_list[[i]] <- rnorm(N,mean = 0,1)
}
} else {
i = 1
}
# other variables
for (j in i:(n_variables-1))
{
modalities <- 2 # number of modalities in each variable
proba <- runif(1) # generation of the binomial parameter 'proba' according to a uniform law
vect_proba[j] <- proba
variables_list[[j]] <- rbernoulli(N,proba) # generation of the values of the variable (the columns of the dataset)
}
j <- j+1
variables_list[[j]] <- rbernoulli(N,variables_list[[j-1]])
DF <- matrix(nrow = N,ncol = n_variables)
for (ncol in seq(n_variables))
{
variables_list[[ncol]] -> DF[,ncol] # generation of the dataset by binding the columns of the variables
}
as.data.frame(DF) -> DF
reslt <- list()
DF -> reslt$DF
vect_proba -> reslt$probas
return(reslt)
}
# Meaningful variables
simulation1 <- simulate_dataset(245,5,0)
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
y_var = vector()
while (prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(ncol(simulation1$DF)))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[ ,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob = mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n + 1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
cat(paste0("intercept = ",intercept))
n <-  n + 1
}
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
DF <- cbind(y_var, simulation1$DF)
# Not meningful factors
simulate_dataset(100,3)$DF -> DF2
colnames(DF2) <- c("interact1","interact2","interact3")
#Bind all variables
cbind(DF,DF2) -> DF
#
#
age <- round(rnorm(245,mean = 60,sd = 10),0)
weight <- round(rnorm(245,mean = 70,sd = 20),0)
weight[weight < 45] <- 53
colnames(DF) <- c("desease","smoker","worker","exposed","cancer","heart desease","gluten free diet","anxiety","depression")
set.seed(2)
prob_inf = 0.2
prob_sup = 0.8
### SIMULATION OF A DATASET (WITHOUT Y)
simulate_dataset <- function(
N=300,#number of row in the dataset
n_variables=5,#number of variable to simulate
n_variables_num = 0 #number of numeric variable
)
{
# construction of variables
variables_list = list()
vect_proba = vector()
#Construction of numeric variables
if (n_variables_num > 0)
{
for (i in seq(n_variables_num))
{
variables_list[[i]] <- rnorm(N,mean = 0,1)
}
} else {
i = 1
}
# other variables
for (j in i:(n_variables-1))
{
modalities <- 2 # number of modalities in each variable
proba <- runif(1) # generation of the binomial parameter 'proba' according to a uniform law
vect_proba[j] <- proba
variables_list[[j]] <- rbernoulli(N,proba) # generation of the values of the variable (the columns of the dataset)
}
j <- j+1
variables_list[[j]] <- rbernoulli(N,variables_list[[j-1]])
DF <- matrix(nrow = N,ncol = n_variables)
for (ncol in seq(n_variables))
{
variables_list[[ncol]] -> DF[,ncol] # generation of the dataset by binding the columns of the variables
}
as.data.frame(DF) -> DF
reslt <- list()
DF -> reslt$DF
vect_proba -> reslt$probas
return(reslt)
}
# Meaningful variables
simulation1 <- simulate_dataset(245,5,0)
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
y_var = vector()
while (prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(ncol(simulation1$DF)))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[ ,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob = mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n + 1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
cat(paste0("intercept = ",intercept))
n <-  n + 1
}
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
DF <- cbind(y_var, simulation1$DF)
# Not meningful factors
simulate_dataset(100,3)$DF -> DF2
colnames(DF2) <- c("interact1","interact2","interact3")
#Bind all variables
cbind(DF,DF2) -> DF
set.seed(2)
prob_inf = 0.2
prob_sup = 0.8
### SIMULATION OF A DATASET (WITHOUT Y)
simulate_dataset <- function(
N=300,#number of row in the dataset
n_variables=5,#number of variable to simulate
n_variables_num = 0 #number of numeric variable
)
{
# construction of variables
variables_list = list()
vect_proba = vector()
#Construction of numeric variables
if (n_variables_num > 0)
{
for (i in seq(n_variables_num))
{
variables_list[[i]] <- rnorm(N,mean = 0,1)
}
} else {
i = 1
}
# other variables
for (j in i:(n_variables-1))
{
modalities <- 2 # number of modalities in each variable
proba <- runif(1) # generation of the binomial parameter 'proba' according to a uniform law
vect_proba[j] <- proba
variables_list[[j]] <- rbernoulli(N,proba) # generation of the values of the variable (the columns of the dataset)
}
j <- j+1
variables_list[[j]] <- rbernoulli(N,variables_list[[j-1]])
DF <- matrix(nrow = N,ncol = n_variables)
for (ncol in seq(n_variables))
{
variables_list[[ncol]] -> DF[,ncol] # generation of the dataset by binding the columns of the variables
}
as.data.frame(DF) -> DF
reslt <- list()
DF -> reslt$DF
vect_proba -> reslt$probas
return(reslt)
}
# Meaningful variables
simulation1 <- simulate_dataset(245,5,0)
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
y_var = vector()
while (prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(ncol(simulation1$DF)))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[ ,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob = mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n + 1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
cat(paste0("intercept = ",intercept))
n <-  n + 1
}
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
DF <- cbind(y_var, simulation1$DF)
# Not meningful factors
simulate_dataset(245,3)$DF -> DF2
colnames(DF2) <- c("interact1","interact2","interact3")
#Bind all variables
cbind(DF,DF2) -> DF
DF %>% kable() %>%
kable_styling(fixed_thead = T,bootstrap_options = c("striped", "hover", "condensed")) %>% scroll_box(height = '200px')
#
#
age <- round(rnorm(245,mean = 60,sd = 10),0)
weight <- round(rnorm(245,mean = 70,sd = 20),0)
weight[weight < 45] <- 53
colnames(DF) <- c("desease","smoker","worker","exposed","cancer","heart desease","gluten free diet","anxiety","depression")
DF <- cbind(DF,weight,age)
DF
DF[,"heart desease"]
DF[,"heart desease"][DF[,"heart desease"] == TRUE]
DF[,"heart desease"][DF[,"heart desease"] == TRUE] <-
?sample
DF[,"heart desease"][DF[,"heart desease"] == TRUE] <-
?sample
DF[,"heart desease"][DF[,"heart desease"] == TRUE] <-
?sample
?sample
sample("stroke","cardiopathy")
sample(c("stroke","cardiopathy"),10)
sample(c("stroke","cardiopathy"),2)
sample(c("stroke","cardiopathy"),1)
DF[,"heart desease"][DF[,"heart desease"] == TRUE] <- sample(c("stroke","cardiopathy"),1)
DF
sample(c("stroke","cardiopathy"),1)
set.seed(2)
prob_inf = 0.2
prob_sup = 0.8
### SIMULATION OF A DATASET (WITHOUT Y)
simulate_dataset <- function(
N=300,#number of row in the dataset
n_variables=5,#number of variable to simulate
n_variables_num = 0 #number of numeric variable
)
{
# construction of variables
variables_list = list()
vect_proba = vector()
#Construction of numeric variables
if (n_variables_num > 0)
{
for (i in seq(n_variables_num))
{
variables_list[[i]] <- rnorm(N,mean = 0,1)
}
} else {
i = 1
}
# other variables
for (j in i:(n_variables-1))
{
modalities <- 2 # number of modalities in each variable
proba <- runif(1) # generation of the binomial parameter 'proba' according to a uniform law
vect_proba[j] <- proba
variables_list[[j]] <- rbernoulli(N,proba) # generation of the values of the variable (the columns of the dataset)
}
j <- j+1
variables_list[[j]] <- rbernoulli(N,variables_list[[j-1]])
DF <- matrix(nrow = N,ncol = n_variables)
for (ncol in seq(n_variables))
{
variables_list[[ncol]] -> DF[,ncol] # generation of the dataset by binding the columns of the variables
}
as.data.frame(DF) -> DF
reslt <- list()
DF -> reslt$DF
vect_proba -> reslt$probas
return(reslt)
}
# Meaningful variables
simulation1 <- simulate_dataset(245,5,0)
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
y_var = vector()
while (prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(ncol(simulation1$DF)))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[ ,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob = mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n + 1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
cat(paste0("intercept = ",intercept))
n <-  n + 1
}
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
DF <- cbind(y_var, simulation1$DF)
# Not meningful factors
simulate_dataset(245,3)$DF -> DF2
colnames(DF2) <- c("interact1","interact2","interact3")
#Bind all variables
cbind(DF,DF2) -> DF
DF %>% kable() %>%
kable_styling(fixed_thead = T,bootstrap_options = c("striped", "hover", "condensed")) %>% scroll_box(height = '200px')
#
#
age <- round(rnorm(245,mean = 60,sd = 10),0)
weight <- round(rnorm(245,mean = 70,sd = 20),0)
weight[weight < 45] <- 53
colnames(DF) <- c("desease","smoker","worker","exposed","cancer","heart desease","gluten free diet","anxiety","depression")
DF <- cbind(DF,weight,age)
DF[,"heart desease"][DF[,"heart desease"] == TRUE] <- sample(c("stroke","cardiopathy"),1)
DF
for (i in DF[,"heart desease"]){
DF[i,"heart desease"] <- sample(c("stroke","cardiopathy"),1)
}
DF
sample(c("stroke","cardiopathy"),1)
DF[,"heart desease"]
for (i in DF[,"heart desease"]){
DF[i,"heart desease"] <- sample(c("stroke","cardiopathy","FALSE"),1)
}
DF
for (i in seq(DF[,"heart desease"])) {
DF[i,"heart desease"] <- sample(c("stroke","cardiopathy","FALSE"),1)
}
DF
as.data.frame(DF)
