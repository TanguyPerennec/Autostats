criteria = "deviance",
method = "backward",
verbose = FALSE)
progressbar(i,total = nbre,variable = s_dev_back$vars_multi,text = "selected variables : ")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
stability_rslts[match(var,stability_rslts[,1]),2] <- as.numeric(stability_rslts[match(var,stability_rslts[,1]),2]) + 1
}
}
}
round((as.numeric(stability_rslts[,2])/nbre)*100,1) -> stability_rslts[,2]
as.data.frame(stability_rslts[order(as.numeric(stability_rslts[,2])),]) -> stability_rslts
colnames(stability_rslts) <- c("variables","% inclusion")
stability_rslts
}
##################################################
#                       MEANS                    #
##################################################
# 1. selection of meaningful variables
typeof(stability_rslts$`% inclusion`)
##################################################
#                       MEANS                    #
##################################################
# 1. selection of meaningful variables
typeof(stability_rslts$variables)
stability_rslts$variables
#stability_rslts$`% inclusion` <- as.numeric(stability_rslts$`% inclusion`)
stability_rslts$variables <- as.character(stability_rslts$variables)
##################################################
#                       MEANS                    #
##################################################
# 1. selection of meaningful variables
typeof(stability_rslts$variables)
for (meaningful_variables in stability_rslts$variables[stability_rslts$`% inclusion` > 30])
{
print(meaningful_variables)
}
meaningful_variables
stability_rslts
stability_rslts$`% inclusion` > 30
stability_rslts$`% inclusion`
stability_rslts$`% inclusion` <- as.integer(stability_rslts$`% inclusion`)
stability_rslts$`% inclusion`
if (stability)
{
stability_rslts <- matrix(ncol = 2,nrow = length(colnames(DF)[colnames(DF) != y]))
stability_rslts[,1] <- colnames(DF)[colnames(DF) != y]
stability_rslts[,2] <- rep(0,nrow(stability_rslts))
nbre = 10
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
newDF$toxiques <- NULL
s_dev_back <- multivariate_selection(newDF,
y,
criteria = "deviance",
method = "backward",
verbose = FALSE)
progressbar(i,total = nbre,variable = s_dev_back$vars_multi,text = "selected variables : ")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
stability_rslts[match(var,stability_rslts[,1]),2] <- as.numeric(stability_rslts[match(var,stability_rslts[,1]),2]) + 1
}
}
}
round((as.numeric(stability_rslts[,2])/nbre)*100,1) -> stability_rslts[,2]
as.data.frame(stability_rslts[order(as.numeric(stability_rslts[,2])),]) -> stability_rslts
colnames(stability_rslts) <- c("variables","% inclusion")
stability_rslts
}
##################################################
#                       MEANS                    #
##################################################
# 1. selection of meaningful variables
as.numeric(stability_rslts$variables)
##################################################
#                       MEANS                    #
##################################################
# 1. selection of meaningful variables
as.vector(stability_rslts$variables)
##################################################
#                       MEANS                    #
##################################################
# 1. selection of meaningful variables
as.character(stability_rslts$`% inclusion`)
##################################################
#                       MEANS                    #
##################################################
# 1. selection of meaningful variables
as.numeric(as.character(stability_rslts$`% inclusion`))
##################################################
#                       MEANS                    #
##################################################
# 1. selection of meaningful variables
stability_rslts$`% inclusion` <- as.numeric(as.character(stability_rslts$`% inclusion`))
stability_rslts$`% inclusion` <- as.integer(stability_rslts$`% inclusion`)
stability_rslts$variables <- as.character(stability_rslts$variables)
##################################################
#                       MEANS                    #
##################################################
# 1. selection of meaningful variables
stability_rslts$`% inclusion` <- as.numeric(as.character(stability_rslts$`% inclusion`))
stability_rslts$`% inclusion`
stability_rslts$variables <- as.character(stability_rslts$variables)
for (meaningful_variables in stability_rslts$variables[stability_rslts$`% inclusion` > 30])
{
print(meaningful_variables)
}
sample(nrow(DF), nrow(DF), replace = TRUE)
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
newDF
meaningful_variables  <-  stability_rslts$variables[stability_rslts$`% inclusion` > 30]
meaningful_variables
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
mod <- glm(newDF[,c(y,meaningful_variables)], family = "binomial")
summary(mod)$coefficients[k + 1, 4]
summary(mod)$coefficients
for (n in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
mod <- glm(newDF[,c(y,meaningful_variables)], family = "binomial")
print(summary(mod)$coefficients[, 1])
}
variables_means_intermediate <- matrix(nrow = (length(meaningful_variables)+1),ncol = (1+nbre))
variables_means_intermediate
variables_means_rslt
variables_means_rslt <- matrix(nrow = (length(meaningful_variables)+1),ncol = 2)
variables_means_rslt[1,] <- c("variables","mean coefficient")
variables_means_rslt
variables_means_rslt[,1] <- c("variables",meaningful_variables)
variables_means_rslt
variables_means_rslt[1+k,2] <- mean(variables_means_intermediate[1+k,2:nbre])
meaningful_variables  <-  stability_rslts$variables[stability_rslts$`% inclusion` > 30]
variables_means_intermediate <- matrix(nrow = (length(meaningful_variables)+1),ncol = (1+nbre))
variables_means_rslt <- matrix(nrow = (length(meaningful_variables)+1),ncol = 2)
variables_means_rslt[1,] <- c("variables","mean coefficient")
variables_means_rslt[,1] <- c("variables",meaningful_variables)
for (n in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
mod <- glm(newDF[,c(y,meaningful_variables)], family = "binomial")
for (k in 1:length(meaningful_variables))
{
summary(mod)$coefficients[(k+1), 1] -> variables_means_intermediate[k+1,n+1]
}
}
for (k in 1:length(meaningful_variables)
{
variables_means_rslt[1+k,2] <- mean(variables_means_intermediate[1+k,2:nbre])
}
##################################################
##################################################
#              MATRICE DE RÃ‰SULTATS              #
##################################################
OR <- exp(mod_multi$coefficients) #exp de la fonction logit
pval <- summary(mod_multi)$coefficients[,4]
IC <- round(suppressMessages(exp(confint(mod_multi))),round)
i <- 0
for (OR_var in names(OR)[-1]) {#-1 remove intercept
i <- i + 1
n_ligne <- match(OR_var,rownames(rslt))
p <- round(as.numeric(pval[i + 1]), round)
p <- ifelse(p == 0, "<0.001", p)
IC_paste <- paste0("[",IC[i + 1, 1], ";", IC[i + 1, 2],"]")
rslt[n_ligne, 5:7] <- c(signif(OR[i + 1], round), IC_paste, p)
}
for (n in 1:length(rslt[-1, 4])) {
p = as.numeric(rslt[n + 1, 4])
round(p, round) -> p
ifelse(p == 0, "<0.001", p) -> rslt[n + 1, 4]
}
##################################################
rslt[1,] <- c("","OR","IC","pval","OR","IC","pval")
row.names(rslt) <- NULL
if ("excel" %in% exit)
write.xlsx(
rslt,
"rslt.xlsx",
sheetName = "reglog",
append = FALSE,
row.names = FALSE
)
if ("console" %in% exit)
print(rslt)
if ("html" %in% exit) {
rslt <- as.data.frame(rslt[-1,])
colnames(rslt) = c("variables","OR_univariate","IC_univariate","pval_univariate","OR_multivariate","IC_multivariate","pval_multivariate")
rslt <- flextable(rslt, col_keys =  c("variables","OR_univariate","IC_univariate","pval_univariate","OR_multivariate","IC_multivariate","pval_multivariate"))
rslt <- delete_part(rslt,part = "header")
rslt <- add_header(x = rslt, variable = "variables",OR_univariate = "OR",IC_univariate = "IC95%",pval_univariate = "p-value",OR_multivariate = "OR",IC_multivariate = "IC95%",pval_multivariate = "p-value", top = FALSE)
rslt <- add_header(x = rslt, variable = "variables",OR_univariate = "univariate modele",IC_univariate = "univariate modele",pval_univariate = "univariate modele",OR_multivariate = "multivariate modele",IC_multivariate = "multivariate modele",pval_multivariate = "multivariate modele", top = TRUE)
rslt <- merge_at(rslt, part = "header",i = 1:1,j = 2:4)
rslt <- merge_at(rslt, part = "header",i = 1:1,j = 5:7)
rslt <- theme_booktabs(rslt)
rslt <- autofit(rslt)
}
cat('
done !
')
return(rslt)
}
##################################################
#                       MEANS                    #
##################################################
# 1. selection of meaningful variables
stability_rslts$`% inclusion` <- as.numeric(as.character(stability_rslts$`% inclusion`))
stability_rslts$variables <- as.character(stability_rslts$variables)
meaningful_variables  <-  stability_rslts$variables[stability_rslts$`% inclusion` > 30]
variables_means_intermediate <- matrix(nrow = (length(meaningful_variables)+1),ncol = (1+nbre))
variables_means_rslt <- matrix(nrow = (length(meaningful_variables)+1),ncol = 2)
variables_means_rslt[1,] <- c("variables","mean coefficient")
variables_means_rslt[,1] <- c("variables",meaningful_variables)
for (n in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
mod <- glm(newDF[,c(y,meaningful_variables)], family = "binomial")
for (k in 1:length(meaningful_variables))
{
summary(mod)$coefficients[(k+1), 1] -> variables_means_intermediate[k+1,n+1]
}
}
for (k in 1:length(meaningful_variables))
{
variables_means_rslt[1+k,2] <- mean(variables_means_intermediate[1+k,2:nbre])
}
variables_means_rslt
variables_means_rslt[1+k,2] <- round(mean(variables_means_intermediate[1+k,2:nbre]),3)
meaningful_variables  <-  stability_rslts$variables[stability_rslts$`% inclusion` > 30]
variables_means_intermediate <- matrix(nrow = (length(meaningful_variables)+1),ncol = (1+nbre))
variables_means_rslt <- matrix(nrow = (length(meaningful_variables)+1),ncol = 2)
variables_means_rslt[1,] <- c("variables","mean coefficient")
variables_means_rslt[,1] <- c("variables",meaningful_variables)
for (n in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
mod <- glm(newDF[,c(y,meaningful_variables)], family = "binomial")
for (k in 1:length(meaningful_variables))
{
summary(mod)$coefficients[(k+1), 1] -> variables_means_intermediate[k+1,n+1]
}
}
for (k in 1:length(meaningful_variables))
{
variables_means_rslt[1+k,2] <- round(mean(variables_means_intermediate[1+k,2:nbre]),3)
}
variables_means_rslt
##################################################
#              MATRICE DE RÃ‰SULTATS              #
##################################################
OR <- exp(mod_multi$coefficients) #exp de la fonction logit
pval <- summary(mod_multi)$coefficients[,4]
IC <- round(suppressMessages(exp(confint(mod_multi))),round)
i <- 0
for (OR_var in names(OR)[-1]) {#-1 remove intercept
i <- i + 1
n_ligne <- match(OR_var,rownames(rslt))
p <- round(as.numeric(pval[i + 1]), round)
p <- ifelse(p == 0, "<0.001", p)
IC_paste <- paste0("[",IC[i + 1, 1], ";", IC[i + 1, 2],"]")
rslt[n_ligne, 5:7] <- c(signif(OR[i + 1], round), IC_paste, p)
}
for (n in 1:length(rslt[-1, 4]))
{
p = as.numeric(rslt[n + 1, 4])
round(p, round) -> p
ifelse(p == 0, "<0.001", p) -> rslt[n + 1, 4]
}
##################################################
rslt[1,] <- c("","OR","IC","pval","OR","IC","pval")
row.names(rslt) <- NULL
devtools::load_all(".")
2:ncol(stability_rslts)
stability_rslts <- matrix(ncol = 4,nrow = length(colnames(DF)[colnames(DF) != y]))
stability_rslts[,1] <- colnames(DF)[colnames(DF) != y]
stability_rslts[,2] <- rep(0,nrow(stability_rslts))
nbre = 10
l = 1
for (critere in c("AIC","BIC","deviance"))
{
l=l+1
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
s_dev_back <- multivariate_selection(newDF,
y,
criteria = critere,
method = "backward",
verbose = FALSE)
progressbar(i,total = nbre,variable = s_dev_back$vars_multi,text = "selected variables : ")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
stability_rslts[match(var,stability_rslts[,1]),l] <- as.numeric(stability_rslts[match(var,stability_rslts[,1]),l]) + 1
}
}
}
}
stability_rslts <- matrix(ncol = 4,nrow = length(colnames(DF)[colnames(DF) != y]))
stability_rslts[,1] <- colnames(DF)[colnames(DF) != y]
stability_rslts[,2] <- rep(0,nrow(stability_rslts))
nbre = 10
l = 1
for (critere in c("AIC","BIC","deviance"))
{
l=l+1
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
s_dev_back <- multivariate_selection(newDF,
y,
criteria = critere,
method = "backward",
verbose = FALSE)
progressbar(i,total = nbre,variable = s_dev_back$vars_multi,text = "selected variables : ")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
stability_rslts[match(var,stability_rslts[,1]),l] <- as.numeric(stability_rslts[match(var,stability_rslts[,1]),l]) + 1
}
}
}
}
stability_rslts <- matrix(ncol = 4,nrow = length(colnames(DF)[colnames(DF) != y]))
stability_rslts[,1] <- colnames(DF)[colnames(DF) != y]
stability_rslts[,2] <- rep(0,nrow(stability_rslts))
nbre = 10
l = 1
for (critere in c("AIC","BIC","deviance"))
{
l=l+1
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
s_dev_back <- multivariate_selection(newDF,
y,
criteria = critere,
method = "backward",
verbose = FALSE)
progressbar(i,total = nbre,variable = s_dev_back$vars_multi,text = "selected variables : ")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
stability_rslts[match(var,stability_rslts[,1]),l] <- as.numeric(stability_rslts[match(var,stability_rslts[,1]),l]) + 1
}
}
}
}
for (n in 2:ncol(stability_rslts))
{
round((as.numeric(stability_rslts[,n])/nbre)*100,1) -> stability_rslts[,n]
}
as.data.frame(stability_rslts[order(as.numeric(stability_rslts[,2])),]) -> stability_rslts
colnames(stability_rslts) <- c("variables","% inclusion AIC","% inclusion BIC","% inclusion deviance")
stability_rslts
stability_rslts[,2:ncol(stability_rslts)] <- rep(0,nrow(stability_rslts))
stability_rslts
stability_rslts <- matrix(ncol = 4,nrow = length(colnames(DF)[colnames(DF) != y]))
stability_rslts[,1] <- colnames(DF)[colnames(DF) != y]
stability_rslts[,2:ncol(stability_rslts)] <- rep(0,nrow(stability_rslts))
nbre = 10
l = 1
for (critere in c("AIC","BIC","deviance"))
{
l=l+1
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
s_dev_back <- multivariate_selection(newDF,
y,
criteria = critere,
method = "backward",
verbose = FALSE)
progressbar(i,total = nbre,variable = s_dev_back$vars_multi,text = "selected variables : ")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
stability_rslts[match(var,stability_rslts[,1]),l] <- as.numeric(stability_rslts[match(var,stability_rslts[,1]),l]) + 1
}
}
}
}
stability_rslts <- matrix(ncol = 4,nrow = length(colnames(DF)[colnames(DF) != y]))
stability_rslts[,1] <- colnames(DF)[colnames(DF) != y]
stability_rslts[,2:ncol(stability_rslts)] <- rep(0,nrow(stability_rslts))
nbre = 10
l = 1
for (critere in c("AIC","BIC","deviance"))
{
l=l+1
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
s_dev_back <- multivariate_selection(newDF,
y,
criteria = critere,
method = "backward",
verbose = FALSE)
progressbar(i,total = nbre,variable = s_dev_back$vars_multi,text = "selected variables : ")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
stability_rslts[match(var,stability_rslts[,1]),l] <- as.numeric(stability_rslts[match(var,stability_rslts[,1]),l]) + 1
}
}
}
}
stability_rslts <- matrix(ncol = 4,nrow = length(colnames(DF)[colnames(DF) != y]))
stability_rslts[,1] <- colnames(DF)[colnames(DF) != y]
stability_rslts[,2:ncol(stability_rslts)] <- rep(0,nrow(stability_rslts))
nbre = 10
l = 1
for (critere in c("AIC","BIC","deviance"))
{
l=l+1
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
s_dev_back <- multivariate_selection(newDF,
y,
criteria = critere,
method = "backward",
verbose = FALSE)
progressbar(i,total = nbre,variable = s_dev_back$vars_multi,text = "selected variables : ")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
stability_rslts[match(var,stability_rslts[,1]),l] <- as.numeric(stability_rslts[match(var,stability_rslts[,1]),l]) + 1
}
}
}
}
for (n in 2:ncol(stability_rslts))
{
round((as.numeric(stability_rslts[,n])/nbre)*100,1) -> stability_rslts[,n]
}
as.data.frame(stability_rslts[order(as.numeric(stability_rslts[,2])),]) -> stability_rslts
colnames(stability_rslts) <- c("variables","% inclusion AIC","% inclusion BIC","% inclusion deviance")
stability_rslts
devtools::load_all(".")
colnames(DF)
y = "admission rÃ©animation (OUI/NON)"
#make.names(y) -> y
autostats::reglog(DF,y, explicatives = c("Age","SEXE","obesite","IMC","Diabete"))
knitr::opts_chunk$set(echo = TRUE)
#devtools::install_github("TanguyPerennec/autostats")
library(autostats)
library(readxl)
library(knitr)
library(kableExtra)
DF <- read_excel("~/MEGA/ARTICLES/CDD/COVID19-HUON/COHORTE COVID-19 Fichier pour stats.xlsx",na = c("NR","NA"))
kable(head(DF)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
DF$`ATB 1Ã¨re ligne`[DF$`ATB 1Ã¨re ligne` != "NON"] <- "OUI"
autostats::table1(DF[,c(1:14,65)],y="ATB 1Ã¨re ligne",exit = "html")
DF <- as.data.frame(DF)
for (n in c(1,3,4,5))
{
print(colnames(DF)[n])
print(autostats::detect_outliers(DF[ ,n],inplace = FALSE))
}
colnames(DF)
colnames(DF)
y = "admission rÃ©animation (OUI/NON)"
#make.names(y) -> y
autostats::reglog(DF,y, explicatives = c("Age","SEXE","obesite","IMC","Diabete"))
devtools::load_all(".")
source('~/MEGA/ARTICLES/Packages/autostats/R/table1.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
#devtools::install_github("TanguyPerennec/autostats")
library(autostats)
library(readxl)
library(knitr)
library(kableExtra)
DF <- read_excel("~/MEGA/ARTICLES/CDD/COVID19-HUON/COHORTE COVID-19 Fichier pour stats.xlsx",na = c("NR","NA"))
kable(head(DF)) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
DF$`ATB 1Ã¨re ligne`[DF$`ATB 1Ã¨re ligne` != "NON"] <- "OUI"
autostats::table1(DF[,c(1:14,65)],y="ATB 1Ã¨re ligne",exit = "html")
DF <- as.data.frame(DF)
for (n in c(1,3,4,5))
{
print(colnames(DF)[n])
print(autostats::detect_outliers(DF[ ,n],inplace = FALSE))
}
colnames(DF)
y = "admission rÃ©animation (OUI/NON)"
#make.names(y) -> y
autostats::reglog(DF,y, explicatives = c("Age","SEXE","obesite","IMC","Diabete"))
source('~/MEGA/ARTICLES/Packages/autostats/R/table1.R', echo=TRUE)
