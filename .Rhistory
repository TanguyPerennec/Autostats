prob_inf = 0.1
### SIMULATION OF A DATASET WITHOUT Y
simulate_dataset <- function(
N=100,#number of row in the dataset
n_variables=5,#number of variable to simulate
n_variables_num = 0 #number of numeric variable
)
{
# construction of variables
variables_list = list()
vect_proba = vector()
# construction of numeric variables
if (n_variables_num > 0)
{
for (i in seq(n_variables_num))
{
variables_list[[i]] <- rnorm(N,mean = 0,1)
}
} else {
i = 1
}
# other variables
for (j in i:n_variables)
{
modalities <- 2
proba <- runif(1)
vect_proba[j] <- proba
variables_list[[j]] <- rbernoulli(N,proba)
}
DF <- matrix(nrow = N,ncol = n_variables)
for (ncol in seq(n_variables))
{
variables_list[[ncol]] -> DF[,ncol]
}
as.data.frame(DF) -> DF
reslt <- list()
DF -> reslt$DF
vect_proba -> reslt$probas
return(reslt)
}
simulation1 <- simulate_dataset(N,n_variables)
# vectors of odds ratios / vectors :
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
while(prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(n_variables))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob=mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n+1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
print(prob)
print(intercept)
n <-  n + 1
}
DF <- cbind(y, simulation1$DF)
DF <- cbind(y, simulation1$DF)
DF
intercept
DF <- cbind(y, simulation1$DF)
reglog(DF,"y")
y
prob
y
bernouilli(1,y)
rbernouilli(1,y)
rbernoulli(1,y)
y
### PARAMETERS
set.seed(2)
N = 1000
n_variables = 5
prob_sup = 0.7
prob_inf = 0.5
### SIMULATION OF A DATASET WITHOUT Y
simulate_dataset <- function(
N=100,#number of row in the dataset
n_variables=5,#number of variable to simulate
n_variables_num = 0 #number of numeric variable
)
{
# construction of variables
variables_list = list()
vect_proba = vector()
# construction of numeric variables
if (n_variables_num > 0)
{
for (i in seq(n_variables_num))
{
variables_list[[i]] <- rnorm(N,mean = 0,1)
}
} else {
i = 1
}
# other variables
for (j in i:n_variables)
{
modalities <- 2
proba <- runif(1)
vect_proba[j] <- proba
variables_list[[j]] <- rbernoulli(N,proba)
}
DF <- matrix(nrow = N,ncol = n_variables)
for (ncol in seq(n_variables))
{
variables_list[[ncol]] -> DF[,ncol]
}
as.data.frame(DF) -> DF
reslt <- list()
DF -> reslt$DF
vect_proba -> reslt$probas
return(reslt)
}
simulation1 <- simulate_dataset(N,n_variables)
# vectors of odds ratios / vectors :
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
while(prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(n_variables))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob=mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n+1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
print(prob)
print(intercept)
n <-  n + 1
}
intercept
y_var = rbernoulli(1,y)
DF <- cbind(y, simulation1$DF)
y_var = rbernoulli(1,y)
y_var
y
y_var = rbernoulli(1,y)
y_var
y
y_var = round(y,0)
y_var
DF <- cbind(y_var, simulation1$DF)
reglog(DF,"y")
reglog(DF,"y_var")
?rbernoulli
rbernoulli(1,y)
y
seq(y)
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
y_var
y[var]
rbernoulli(1,y[var])
rbernoulli(1,y[var])
rbernoulli(1,y[var])
rbernoulli(1,y[var])
rbernoulli(1,y[var])
y_var
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
y_var
### PARAMETERS
set.seed(2)
N = 1000
n_variables = 5
prob_sup = 0.7
prob_inf = 0.5
### SIMULATION OF A DATASET WITHOUT Y
simulate_dataset <- function(
N=100,#number of row in the dataset
n_variables=5,#number of variable to simulate
n_variables_num = 0 #number of numeric variable
)
{
# construction of variables
variables_list = list()
vect_proba = vector()
# construction of numeric variables
if (n_variables_num > 0)
{
for (i in seq(n_variables_num))
{
variables_list[[i]] <- rnorm(N,mean = 0,1)
}
} else {
i = 1
}
# other variables
for (j in i:n_variables)
{
modalities <- 2
proba <- runif(1)
vect_proba[j] <- proba
variables_list[[j]] <- rbernoulli(N,proba)
}
DF <- matrix(nrow = N,ncol = n_variables)
for (ncol in seq(n_variables))
{
variables_list[[ncol]] -> DF[,ncol]
}
as.data.frame(DF) -> DF
reslt <- list()
DF -> reslt$DF
vect_proba -> reslt$probas
return(reslt)
}
simulation1 <- simulate_dataset(N,n_variables)
# vectors of odds ratios / vectors :
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
while (prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(n_variables))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob = mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n + 1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
print(prob)
print(intercept)
n <-  n + 1
}
intercept
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
y_var
DF <- cbind(y_var, simulation1$DF)
reglog(DF,"y_var")
### PARAMETERS
set.seed(2)
N = 1000
n_variables = 5
prob_sup = 0.7
prob_inf = 0.5
### SIMULATION OF A DATASET WITHOUT Y
simulate_dataset <- function(
N=100,#number of row in the dataset
n_variables=5,#number of variable to simulate
n_variables_num = 0 #number of numeric variable
)
{
# construction of variables
variables_list = list()
vect_proba = vector()
# construction of numeric variables
if (n_variables_num > 0)
{
for (i in seq(n_variables_num))
{
variables_list[[i]] <- rnorm(N,mean = 0,1)
}
} else {
i = 1
}
# other variables
for (j in i:n_variables)
{
modalities <- 2
proba <- runif(1)
vect_proba[j] <- proba
variables_list[[j]] <- rbernoulli(N,proba)
}
DF <- matrix(nrow = N,ncol = n_variables)
for (ncol in seq(n_variables))
{
variables_list[[ncol]] -> DF[,ncol]
}
as.data.frame(DF) -> DF
reslt <- list()
DF -> reslt$DF
vect_proba -> reslt$probas
return(reslt)
}
simulation1 <- simulate_dataset(N,n_variables)
# vectors of odds ratios / vectors :
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
while (prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(n_variables))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob = mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n + 1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
print(prob)
print(intercept)
n <-  n + 1
}
intercept
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
y_var
DF <- cbind(y_var, simulation1$DF)
# Not meningful factors
simulate_dataset(N,3) -> DF2
cbind(DF,DF2) -> DF
# vectors of odds ratios / vectors :
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
y_var = vector()
while (prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(n_variables))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob = mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n + 1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
print(prob)
print(intercept)
n <-  n + 1
}
intercept
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
y_var
DF <- cbind(y_var, simulation1$DF)
# Not meningful factors
simulate_dataset(N,3) -> DF2
cbind(DF,DF2) -> DF
DF2
DF
cbind(DF,DF2) -> DF
DF2
cbind(DF,DF2) -> DF
cbind(DF,DF2)
DF2
DF
DF2
DF2
# Not meningful factors
simulate_dataset(N,3) -> DF2
colnames(DF2) <- c("interact1","interact2","interact3")
DF2
# Not meningful factors
simulate_dataset(N,3)$DF -> DF2
colnames(DF2) <- c("interact1","interact2","interact3")
cbind(DF,DF2) -> DF
reglog(DF,"y_var")
rslt <- matrix(ncol = 2,nrow = length(colnames(DF)[colnames(DF) != y]))
rslt[,1] <- colnames(DF)[colnames(DF) != y]
rslt[,2] <- rep(0,nrow(rslt))
nbre = 100
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
newDF$toxiques <- NULL
s_dev_back <- multivariate_selection(newDF,
y = "Récidive",
criteria = "BIC",
method = "backward")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
rslt[match(var,rslt[,1]),2] <- as.numeric(rslt[match(var,rslt[,1]),2]) + 1
}
}
}
rslt <- matrix(ncol = 2,nrow = length(colnames(DF)[colnames(DF) != y]))
rslt[,1] <- colnames(DF)[colnames(DF) != y]
rslt[,2] <- rep(0,nrow(rslt))
nbre = 100
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
newDF$toxiques <- NULL
s_dev_back <- multivariate_selection(newDF,
y = "Récidive",
criteria = "BIC",
method = "backward")
rslt <- matrix(ncol = 2,nrow = length(colnames(DF)[colnames(DF) != y]))
rslt[,1] <- colnames(DF)[colnames(DF) != y]
rslt[,2] <- rep(0,nrow(rslt))
nbre = 100
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
s_dev_back <- multivariate_selection(newDF,
y = "var_y",
criteria = "BIC",
method = "backward")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
rslt[match(var,rslt[,1]),2] <- as.numeric(rslt[match(var,rslt[,1]),2]) + 1
}
}
}
s_dev_back <- multivariate_selection(newDF,
y = "var_y",
criteria = "BIC",
method = "backward")
rslt <- matrix(ncol = 2,nrow = length(colnames(DF)[colnames(DF) != y]))
rslt[,1] <- colnames(DF)[colnames(DF) != y]
rslt[,2] <- rep(0,nrow(rslt))
nbre = 100
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
s_dev_back <- multivariate_selection(newDF,y = "y_var")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
rslt[match(var,rslt[,1]),2] <- as.numeric(rslt[match(var,rslt[,1]),2]) + 1
}
}
}
round((as.numeric(rslt[,2])/nbre)*100,1) -> rslt[,2]
as.data.frame(rslt[order(as.numeric(rslt[,2])),]) -> rslt
colnames(rslt) <- c("variables","% inclusion")
rslt %>% kable()
library(kableExtra)
rslt %>% kable()
y="y_var"
y="y_var"
rslt <- matrix(ncol = 2,nrow = length(colnames(DF)[colnames(DF) != y]))
rslt[,1] <- colnames(DF)[colnames(DF) != y]
rslt[,2] <- rep(0,nrow(rslt))
nbre = 10
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
s_dev_back <- multivariate_selection(newDF,y = "y_var")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
rslt[match(var,rslt[,1]),2] <- as.numeric(rslt[match(var,rslt[,1]),2]) + 1
}
}
}
round((as.numeric(rslt[,2])/nbre)*100,1) -> rslt[,2]
as.data.frame(rslt[order(as.numeric(rslt[,2])),]) -> rslt
colnames(rslt) <- c("variables","% inclusion")
rslt %>% kable()
y="y_var"
rslt <- matrix(ncol = 2,nrow = length(colnames(DF)[colnames(DF) != y]))
rslt[,1] <- colnames(DF)[colnames(DF) != y]
rslt[,2] <- rep(0,nrow(rslt))
nbre = 100
for (i in 1:nbre)
{
sample(nrow(DF), nrow(DF), replace = TRUE) -> colDF
newDF <- DF[colDF, ]
s_dev_back <- multivariate_selection(newDF,y = "y_var")
for (var in colnames(DF)[colnames(DF) != y])
{
if (var %in% s_dev_back$vars_multi)
{
rslt[match(var,rslt[,1]),2] <- as.numeric(rslt[match(var,rslt[,1]),2]) + 1
}
}
}
round((as.numeric(rslt[,2])/nbre)*100,1) -> rslt[,2]
as.data.frame(rslt[order(as.numeric(rslt[,2])),]) -> rslt
colnames(rslt) <- c("variables","% inclusion")
rslt %>% kable()
remove.packages("autostats")
devtools::install_github("TanguyPerennec/Autostats")
devtools::install_github("TanguyPerennec/Autostats")
load("~/MEGA/ARTICLES/Packages/autostats/.RData")
usethis::use_package('kable_extra')
library(kableExtra)
usethis::use_package('kableExtra')
usethis::use_package('readr')
