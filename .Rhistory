model0 <- stats::glm(formule, data = DF, family = "binomial")
pvals <- summary(model0)$coefficients[,4]
#Elimination one by one of all interaction variable based on PVALUE
interact_pval <- pvals[match(interactives_remains,names(pvals))]
interact_pval <- interact_pval[order(-interact_pval)]
if (interact_pval[1] > alpha)
{
interactives_remains <- interactives_remains[interactives_remains != names(interact_pval)]
}
}
}
}
vars_remainings <- explicatives
formule_lastmodel <- formulation(DF[,c(y,vars_remainings)])
last_model <- stats::glm(formule_lastmodel,data = DF, family = "binomial")
vars_out <- NULL
while (length(vars_remainings) > 0 & nstep < length(explicatives)*3)
{
nstep <- nstep + 1
model_test_df <- matrix(nrow = length(vars_remainings), ncol = 2)
for (i in seq(vars_remainings))
{
pval <- models_test(model = last_model, y, var_diff = vars_remainings[i])
model_test_df[i,] <- c(vars_remainings[i],pval)
}
model_test_df <- as.data.frame(model_test_df)
col2 <- ifelse(criteria == "deviance","pval",paste0("∆",criteria))
colnames(model_test_df) <- c("name",col2)
model_test_df[,2] <- as.numeric(as.character(model_test_df[,2]))
model_test_df$name <- as.character(model_test_df$name)
for (f in seq(model_test_df[,1]))
{
col <- model_test_df[f,1]
matrix_rslt[match(col,rownames(matrix_rslt)),nstep] <- model_test_df[f,2]
}
model_test_df[order(-model_test_df[,2]),] -> model_test_df
k <- 1
while (model_test_df[k,1] %in% keep)
{
k <- k + 1
}
if (model_test_df[k,2] > ifelse(criteria == "deviance",alpha,7))
{
if (verbose)
cat("\nThe best model exlude <",model_test_df[k,1], "> (",ifelse(criteria == "deviance","with likelihood ratio test : p =","with ∆AIC ="),round(as.numeric(model_test_df[k,2]),3),"), so this variable is now excluded")
vars_remainings <- vars_remainings[vars_remainings != model_test_df[k,1]]
vars_out <- c(vars_out,model_test_df[k,1])
}else
{
if (verbose)
cat("\nThe best model do not exlude any variable of the remainings (",ifelse(criteria == "deviance",paste0("with risk",alpha),paste0("with ∆",criteria," threeshold = 10")),"):",vars_remainings)
break
}
last_model <- stats::glm(formula = formulation(object = vars_remainings,y),family = "binomial",data = DF)
############
if ((grepl("stepwise",method) || "stepwise" %in% method) & !is.null(vars_out))
{
model_test_df <- matrix(nrow = length(vars_out), ncol = 2)
for (i in seq(vars_out))
{
pval <- models_test(model = last_model, y, var_diff = vars_out[i])
model_test_df[i,] <- c(vars_out[i],pval)
}
model_test_df <- as.data.frame(model_test_df)
col2 <- ifelse(criteria == "deviance","pval",paste0("∆",criteria))
colnames(model_test_df) <- c("name",col2)
model_test_df[,2] <- as.numeric(as.character(model_test_df[,2]))
model_test_df$name <- as.character(model_test_df$name)
for (f in seq(model_test_df[,1]))
{
col <- model_test_df[f,1]
matrix_rslt[match(col,rownames(matrix_rslt)),nstep] <- model_test_df[f,2]
}
model_test_df[order(model_test_df[,2]),] -> model_test_df
k <- 1
while (model_test_df[k,1] %in% keep)
{
k <- k + 1
}
if (model_test_df[k,2] < ifelse(criteria == "deviance",alpha,7))
{
if (verbose)
cat("\nThe best model now includes <",model_test_df[k,1], "> (",ifelse(criteria == "deviance","with likelihood ratio test : p =","with ∆AIC ="),round(as.numeric(model_test_df[k,2]),3),"), so this variable is now excluded")
vars_remainings <- c(vars_remainings,model_test_df[k,1])
vars_out <- vars_out[vars_out != model_test_df[k,1]]
}
else
{
if (verbose)
cat("\nThe best model does not include any variables out of the present model (",ifelse(criteria == "deviance",paste0("with risk",alpha),paste0("with ∆",criteria," threeshold = 10")),"):",vars_out)
}
}
last_model <- stats::glm(formula = formulation(object = vars_remainings,y),family = "binomial",data = DF)
}
}
# FORWARD SELECTION
##############
if (grepl("forward",method) || "forward" %in% method)
{
if (is.null(keep) || is.logical(keep))
{
vars_included <- principal_factor
}else{
vars_included <- keep
}
vars_remainings <- explicatives[explicatives != vars_included]
formule <- formulation(vars_included,y)
last_model <- stats::glm(formule,data = DF, family = "binomial")
nstep <- 0
while (length(vars_remainings) > 0 & nstep < length(explicatives)*3)
{
nstep <- nstep + 1
model_test_df <- matrix(nrow = length(vars_remainings), ncol = 2)
for (i in seq(vars_remainings))
{
pval <- models_test(model = last_model, y, var_diff = vars_remainings[i])
model_test_df[i,] <- c(vars_remainings[i],pval)
}
model_test_df <- as.data.frame(model_test_df)
col2 <- ifelse(criteria == "deviance","pval",paste0("∆",criteria))
colnames(model_test_df) <- c("name",col2)
model_test_df[,2] <- as.numeric(as.character(model_test_df[,2]))
model_test_df$name <- as.character(model_test_df$name)
for (f in seq(model_test_df[,1]))
{
col <- model_test_df[f,1]
matrix_rslt[match(col,rownames(matrix_rslt)),nstep] <- model_test_df[f,2]
}
model_test_df[order(model_test_df[,2]),] -> model_test_df
if (model_test_df[1,2] < ifelse(criteria == "deviance",alpha,delta))
{
if (verbose)
cat("\nThe best model includes <",model_test_df[1,1], "> (",ifelse(criteria == "deviance","with likelihood ratio test : p =","with ∆AIC ="),round(as.numeric(model_test_df[1,2]),3),"), so this variable is now included")
vars_remainings <- vars_remainings[vars_remainings != model_test_df[1,1]]
vars_included <- c(vars_included,model_test_df[1,1])
}else
{
if (verbose)
cat("\nThe best model does not include any variables remaining (",ifelse(criteria == "deviance",paste0("with risk ",alpha),paste0("with ∆",criteria," threeshold = 10")),"):",vars_remainings)
break
}
last_model <- stats::glm(formula = formulation(object = vars_included,y),family = "binomial",data = DF)
if ((grepl("stepwise",method) || "stepwise" %in% method) & nstep > 1)
{
model_test_df <- matrix(nrow = length(vars_included), ncol = 2)
vars_included <- vars_included[vars_included != FALSE]
for (i in seq(vars_included))
{
pval <- models_test(model = last_model, y, var_diff = vars_included[i])
model_test_df[i,] <- c(vars_included[i],pval)
}
model_test_df <- as.data.frame(model_test_df)
col2 <- ifelse(criteria == "deviance","pval",paste0("∆",criteria))
colnames(model_test_df) <- c("name",col2)
model_test_df[,2] <- as.numeric(as.character(model_test_df[,2]))
model_test_df$name <- as.character(model_test_df$name)
for (f in seq(model_test_df[,1]))
{
col <- model_test_df[f,1]
matrix_rslt[match(col,rownames(matrix_rslt)),nstep] <- model_test_df[f,2]
}
model_test_df[order(-model_test_df[,2]),] -> model_test_df
k <- 1
while (model_test_df[k,1] %in% keep)
{
k <- k + 1
}
if (model_test_df[k,2] > ifelse(criteria == "deviance",alpha,7))
{
if (verbose)
cat("\nThe best model now exlude <",model_test_df[k,1], "> (",ifelse(criteria == "deviance","with likelihood ratio test : p =","with ∆AIC ="),round(as.numeric(model_test_df[k,2]),3),"), so this variable is now excluded")
vars_remainings <- c(vars_remainings,model_test_df[k,1])
vars_included <- vars_included[vars_included != model_test_df[k,1]]
}
else
{
if (verbose)
cat("\nThe best model do not exlude any variable of the present model (",ifelse(criteria == "deviance",paste0("with risk",alpha),paste0("with ∆",criteria," threeshold = 10")),"):",vars_included)
}
last_model <- stats::glm(formula = formulation(object = vars_included,y),family = "binomial",data = DF)
}
}
}
# Backward selection for interaction
if (check_interactions)
{
if (length(interactives_remains) > 0)
{
for (i in seq(interactives_remains))
{
formule <- formulation(DF[,c(y,explicatives_remains)])
for (i in seq(interactives_remains))
{
interactive_formule <-
ifelse(i == 1, interactives_remains[i], paste0("+", interactives_remains[i]))
}
newterms <- interactive_formule
formule <- update(formule, ~ . + newterms)
model0 <- stats::glm(formule, data = DF, family = "binomial")
pvals <- summary(model0)$coefficients[,4]
#Elimination one by one of all interaction variable based on PVALUE
interact_pval <- pvals[match(interactives_remains,names(pvals))]
interact_pval <- interact_pval[order(-interact_pval)]
if (interact_pval[1] > alpha)
{
interactives_remains <- interactives_remains[interactives_remains != names(interact_pval)]
}
}
}
}
vars_remainings <- explicatives
formule_lastmodel <- formulation(DF[,c(y,vars_remainings)])
formule_lastmodel <- formulation(DF[,c(y,vars_remainings)])
DF[,c(y,vars_remainings)]
# 1. Getting y
#############################################
if (is.null(y))
{
if (is.data.frame(object) || is.matrix(object) || is.tbl(object))
{
object <- as.data.frame(object)
y <- colnames(object)[1]
}else
{
y <- object[1]
}
}
# 2. Put y in first position
#############################################
if (is.data.frame(object))
{
object <- object[,c(y,colnames(object)[colnames(object) != y])]
} else
{
object <- c(y,object[object != y])
}
object = "admission réanimation (OUI/NON)"
object = DF[,c(y,vars_remainings)]
formulation(object = DF[,c(y,vars_remainings)])
# 2. Getting a vector with all explicatives into 'object'
###########################################################
if (is.data.frame(object))
{
if (is.null(colnames(object)))
{
object <- object[1, ]
} else
{
object <- colnames(object)
}
} else
{
if (length(object) == 0) stop("object is null")
if (!(is.vector(object) || is.character(object)))
{
stop("the object is not coercible into formula")
}
}
# 3. Coherce object to formula
#############################################
formule <- paste0(y, "~", object[2])
for (explicative in object[-c(1, 2)])
{
formule <- paste0(formule, "+", explicative)
}
formule <- formula(formule)
formule <- formula(formule)
formule
## passage en réa
colnames(DF)[colnames(DF) == "admission réanimation (OUI/NON)"] <- "admission reanimation (OUI/NON)"
DF$`admission reanimation (OUI/NON)`[DF$`admission reanimation (OUI/NON)` == "OUI"] <- 1
DF$`admission reanimation (OUI/NON)`[DF$`admission reanimation (OUI/NON)` == "NON"] <- 0
DF$`admission reanimation (OUI/NON)` <- as.factor(DF$`admission reanimation (OUI/NON)`)
glm(`admission reanimation (OUI/NON)`~`SEXE (M/F)`+Age+`poids (KG)`+IRC+Diabète+obésité+`ATCD CV (HTA, AVC, chir cardiaque, IC, infarctus)`+Dyslipidémie+`Patho Chronique Respi`+
`K actif`,data = DF,family = "binomial") -> model1
ORs <- exp(summary(model1)$coefficients[,1])
library(readxl)
library(tidyverse)
library(table1)
PATH = "../../"
DF <- read_excel("../../COVID19-HUON/COHORTE COVID-19 Fichier pour stats.xlsx",na = c("NR","NA"),skip = 1)
colnames(DF)
#View(DF)
colnames(DF)
DF$Age <- as.numeric(DF$Age)
DF$`poids (KG)` <- as.numeric(DF$`poids (KG)`)
DF$`taille (m)`<- as.numeric(DF$`taille (m)`)
DF$IMC <- as.numeric(DF$IMC)
DF$`SEXE (M/F)`
# commorbidité
DF$IRC <- as.factor(DF$IRC)
DF$Diabète <- as.factor(DF$Diabète)
DF$obésité <- as.factor(DF$obésité)
DF$`ATCD CV (HTA, AVC, chir cardiaque, IC, infarctus)` <- as.factor(DF$`ATCD CV (HTA, AVC, chir cardiaque, IC, infarctus)`)
DF$Dyslipidémie <- as.factor(DF$Dyslipidémie)
DF$`Patho Chronique Respi`<- as.factor(DF$`Patho Chronique Respi`)
DF$`K actif` <- as.factor(DF$`K actif`)
##=========================##
##       DESCRIPTION       ##
##=========================##
label(DF$`SEXE (M/F)`) <- "Sexe"
table1::table1(~Age+`poids (KG)`+`taille (m)`+IMC+`SEXE (M/F)`,data = DF)
##=========================##
##       QUESTION 1        ##
##=========================##
#est ce que la durée de séjour / le passage en réa / le décès / la prescription de traitements spécifiques
#est liée au sexe / à l'âge /au poids / à l'existence de comorbidités ?
## durée de sejour
## passage en réa
colnames(DF)[colnames(DF) == "admission réanimation (OUI/NON)"] <- "admission reanimation (OUI/NON)"
DF$`admission reanimation (OUI/NON)`[DF$`admission reanimation (OUI/NON)` == "OUI"] <- 1
DF$`admission reanimation (OUI/NON)`[DF$`admission reanimation (OUI/NON)` == "NON"] <- 0
DF$`admission reanimation (OUI/NON)` <- as.factor(DF$`admission reanimation (OUI/NON)`)
glm(`admission reanimation (OUI/NON)`~`SEXE (M/F)`+Age+`poids (KG)`+IRC+Diabète+obésité+`ATCD CV (HTA, AVC, chir cardiaque, IC, infarctus)`+Dyslipidémie+`Patho Chronique Respi`+
`K actif`,data = DF,family = "binomial") -> model1
ORs <- exp(summary(model1)$coefficients[,1])
Rslts <- cbind(ORs,confint(model1),summary(model1)$coefficients[,4])
Rslts
autostats::reglog(DF, y = "admission reanimation (OUI/NON)",explicatives = c("SEXE (M/F)","Age","poids (KG)","IRC","Diabète","obésité",
"ATCD CV (HTA, AVC, chir cardiaque, IC, infarctus)","Dyslipidémie",
"Patho Chronique Respi","K actif"))
library(readxl)
library(tidyverse)
library(table1)
PATH = "../../"
DF <- read_excel("../../COVID19-HUON/COHORTE COVID-19 Fichier pour stats.xlsx",na = c("NR","NA"),skip = 1)
colnames(DF)
#View(DF)
colnames(DF)
DF$Age <- as.numeric(DF$Age)
DF$`poids (KG)` <- as.numeric(DF$`poids (KG)`)
DF$`taille (m)`<- as.numeric(DF$`taille (m)`)
DF$IMC <- as.numeric(DF$IMC)
DF$`SEXE (M/F)`
# commorbidité
DF$IRC <- as.factor(DF$IRC)
DF$Diabète <- as.factor(DF$Diabète)
DF$obésité <- as.factor(DF$obésité)
DF$`ATCD CV (HTA, AVC, chir cardiaque, IC, infarctus)` <- as.factor(DF$`ATCD CV (HTA, AVC, chir cardiaque, IC, infarctus)`)
DF$Dyslipidémie <- as.factor(DF$Dyslipidémie)
DF$`Patho Chronique Respi`<- as.factor(DF$`Patho Chronique Respi`)
DF$`K actif` <- as.factor(DF$`K actif`)
##=========================##
##       DESCRIPTION       ##
##=========================##
label(DF$`SEXE (M/F)`) <- "Sexe"
table1::table1(~Age+`poids (KG)`+`taille (m)`+IMC+`SEXE (M/F)`,data = DF)
colnames(DF)[colnames(DF) == "admission réanimation (OUI/NON)"] <- "admission reanimation (OUI/NON)"
DF$`admission reanimation (OUI/NON)`[DF$`admission reanimation (OUI/NON)` == "OUI"] <- 1
DF$`admission reanimation (OUI/NON)`[DF$`admission reanimation (OUI/NON)` == "NON"] <- 0
DF$`admission reanimation (OUI/NON)` <- as.factor(DF$`admission reanimation (OUI/NON)`)
glm(`admission reanimation (OUI/NON)`~`SEXE (M/F)`+Age+`poids (KG)`+IRC+Diabète+obésité+`ATCD CV (HTA, AVC, chir cardiaque, IC, infarctus)`+Dyslipidémie+`Patho Chronique Respi`+
`K actif`,data = DF,family = "binomial") -> model1
ORs <- exp(summary(model1)$coefficients[,1])
Rslts <- cbind(ORs,confint(model1),summary(model1)$coefficients[,4])
Rslts
View(DF)
autostats::reglog(DF, y = "admission reanimation (OUI/NON)",explicatives = c("SEXE (M/F)","Age","poids (KG)","IRC",
"ATCD CV (HTA, AVC, chir cardiaque, IC, infarctus)","Dyslipidémie",
"Patho Chronique Respi","K actif"))
str(DF)
library(readxl)
library(tidyverse)
library(stringr)
setwd("~/MEGA/ARTICLES/These_psychiatrie")
library(autostats)
##################
# DATA CLEANING  #
##################
DFinit <- read_excel("Datas/Copie de Copie de thèse.xlsx",
sheet = "données recueillies",
range = "B1:AA109")
DF <- DFinit
DF2 <- read_excel("Datas/Copie de Copie de thèse.xlsx",
sheet = "données recueillies en codage",
range = "B1:AA109")
codage <- read_excel("Datas/Copie de Copie de thèse.xlsx",
sheet = "codage des variables")
#view(DFinit)
#transformation de l'âge
DF %>%
separate(Age, c("années", "mois"),sep = "a") -> DF
str_replace_all(DF$mois, c("mois" = "","ns" = "")) -> DF$mois
as.numeric(DF$mois) -> DF$mois
as.numeric(DF$années) -> DF$années
DF$mois <- round(DF$mois*10/120,2)
DF$mois[is.na(DF$mois)] <- 0 #pas de NA initialement mais introduits si mois =""
DF$années <- DF$années + DF$mois
DF %>%
select(-mois) -> DF
colnames(DF)[2] <- "Age"
#modif colonnes
DF <- as.data.frame(DF)
DF$Sexe[DF$Sexe == "masculin"] <- "homme"
DF[DF == 9] <- NA
DF[DF == "non renseigné"] <- NA
DF[DF == "?"] <- NA
DF[DF == "aucun"] <- "non"
DF[DF == "aucune"] <- "non"
DF[DF == "sacrifications"] <- "scarifications"
#DF$mode <- str_replace(DF$mode, "ts par ", "")
#DF$mode <- str_replace(DF$mode, "intoxication aux ", "ingestion de ")
DF$facteur_precipitant <- str_replace(DF$facteur_precipitant, "facteur précipitant : ", "")
DF$facteur_precipitant <- str_replace(DF$facteur_precipitant, "facteur precipitant : ", "")
DF$facteur_precipitant <- str_replace(DF$facteur_precipitant, "facteur declenchant : ", "")
DF$facteur_precipitant <- str_replace(DF$facteur_precipitant, "cause", "situation")
DF$scolarite <- str_replace_all(DF$scolarite, c("descolarisé"="descolarisation", "descolarisée"="descolarisation", "difficulté"="difficultés","difficulte"="difficultés","scolaire"="scolaires","ss"="s"))
DF$scolarite <- str_replace(DF$scolarite, "scolarisation", "scolarite")
levels(as.factor(DF$scolarite))
DF$scolarite[DF$scolarite == "descolaritee"] <- "descolarite"
DF$scolarite[DF$scolarite == "difficulés scolaires"] <- "difficultés scolaires"
DF$scolarite[DF$scolarite == "ITEP"] <- "difficultés scolaires"
DF$scolarite[DF$scolarite == "scolarite clasique"] <- "scolarité clasique"
DF$scolarite[DF$scolarite == "scolarité clasique"] <- "scolarité classique"
DF$scolarite <- str_replace(DF$scolarite, ", redoublement", "")
DF$scolarite <- as.factor(DF$scolarite)
DF$scolarite <- relevel(DF$scolarite,"scolarité classique")
DF$diagnostic <- str_replace(DF$diagnostic, "troubles", "trouble")
DF$TTT <- str_replace(DF$diagnostic, "anxiolytiques seuls", "anxiolytique seul")
#le changement de la casse/accents à lieu dans table1
########### CODAGE
# mode : concernant le mode tu peux mettre soit IMV, soit tentative de pendaison, soit autre
DF2[DF2 == 9] <- NA
DF2$Mode[DF2$Mode == 0] <- "IMV"
DF2$Mode[DF2$Mode == 1] <- "IMV"
DF2$Mode[DF2$Mode == 2] <- "Tentative de pendaison"
DF2$Mode[DF2$Mode == 3] <- "Autre"
DF$mode <- as.factor(DF2$Mode)
DF$mode <- relevel(DF$mode,"Autre")
#Pour l’orientation : hospitalisation, consultation ou rien
DF2$orientation[DF2$orientation == 0] <- "RAD sans RDV"
DF2$orientation[DF2$orientation == 1] <- "RAD avec consultation"
DF2$orientation[DF2$orientation == 2] <- "RAD avec consultation"
DF2$orientation[DF2$orientation == 3] <- "RAD avec consultation"
DF2$orientation[DF2$orientation == 4] <- "Hospitalisation"
DF2$orientation[DF2$orientation == 5] <- "Hospitalisation"
DF$orientation <- as.factor(DF2$orientation)
DF$orientation <- relevel(DF$orientation,"RAD sans RDV")
DF2$conduite_risque[DF2$conduite_risque == 0] <- "Non"
DF2$conduite_risque[DF2$conduite_risque == 1 | DF2$conduite_risque == "1 et 4"] <- "Fugue"
DF2$conduite_risque[DF2$conduite_risque == 2] <- "Violence"
DF2$conduite_risque[DF2$conduite_risque == 3] <- "Risque sexuel"
DF2$conduite_risque[DF2$conduite_risque == 4] <- "Scarifications non suicidaires"
DF$conduite_risque <- as.factor(DF2$conduite_risque)
DF$conduite_risque <- relevel(DF$conduite_risque,"Non")
DF2$lieu_vie[DF2$lieu_vie == 0] <- "Chez les 2 parents"
DF2$lieu_vie[DF2$lieu_vie == 1] <- "Chez un des deux parents"
DF2$lieu_vie[DF2$lieu_vie == 2] <- "Placement"
DF2$lieu_vie[DF2$lieu_vie == 3] <- "Autre"
DF$lieu_vie <- as.factor(DF2$lieu_vie)
DF$lieu_vie <- relevel(DF$lieu_vie,"Autre")
DF2$suivi[DF2$suivi == 0] <- "non"
DF2$suivi[DF2$suivi == 1] <- "psychologue libéral"
DF2$suivi[DF2$suivi == 2] <- "psychiatre libéral"
DF2$suivi[DF2$suivi == 3] <- "CMP"
DF2$suivi[DF2$suivi == 4] <- "Autre"
DF$suivi <- as.factor(DF2$suivi)
DF$suivi <- relevel(DF$suivi,"non")
DF2$TTT[DF2$TTT == 0] <- "non"
DF2$TTT[DF2$TTT == 1] <- "anxiolytiques seuls"
DF2$TTT[DF2$TTT == 2] <- "antidépresseur"
DF2$TTT[DF2$TTT == 3] <- "autre"
DF2$TTT[DF2$TTT == 4] <- "autre"
DF2$TTT[DF2$TTT == 5] <- "autre"
DF$TTT <- as.factor(DF2$TTT)
DF$TTT <- relevel(DF$TTT,"non")
#Pour le diagnostic : épisode anxio dépressif, troubles des conduites (=trouble de la personnalité), trouble psychotique, TDAH et trouble bipolaire. Les 3 derniers ça peut être regrouper en « autre » si il y en a peu
DF2$diagnostic[DF2$diagnostic == 0] <- "non"
DF2$diagnostic[DF2$diagnostic == 1] <- "épisode anxio-dépressif"
DF2$diagnostic[DF2$diagnostic == 2] <- "trouble psychotique"
DF2$diagnostic[DF2$diagnostic == 3] <- "autre"
DF2$diagnostic[DF2$diagnostic == 4] <- "autre"
DF2$diagnostic[DF2$diagnostic == 5] <- "trouble des conduites"
DF2$diagnostic[DF2$diagnostic == 6] <- "autre"
DF2$diagnostic[DF2$diagnostic == 7] <- "épisode anxio-dépressif"
DF2$diagnostic[DF2$diagnostic == 8] <- "autre"
DF$diagnostic <- as.factor(DF2$diagnostic)
DF$diagnostic <- relevel(DF$diagnostic,"non")
DF2$antecedent_familiaux[DF2$antecedent_familiaux == 0] <- "non"
DF2$antecedent_familiaux[DF2$antecedent_familiaux == 1] <- "trouble de l'humeur"
DF2$antecedent_familiaux[DF2$antecedent_familiaux == 2] <- "psychose"
DF2$antecedent_familiaux[DF2$antecedent_familiaux == 3] <- "trouble addictif"
DF2$antecedent_familiaux[DF2$antecedent_familiaux == 4] <- "autre"
DF$antecedent_familiaux <- as.factor(DF2$antecedent_familiaux)
DF$antecedent_familiaux <- relevel(DF$antecedent_familiaux,"non")
DF2$facteur_precipitant[DF2$facteur_precipitant == 0] <- "non"
DF2$facteur_precipitant[DF2$facteur_precipitant == 1] <- "conflit familial"
DF2$facteur_precipitant[DF2$facteur_precipitant == 2] <- "conflit amical"
DF2$facteur_precipitant[DF2$facteur_precipitant == 3] <- "rupture sentimentale"
DF2$facteur_precipitant[DF2$facteur_precipitant == 4] <- "autre"
DF2$facteur_precipitant[DF2$facteur_precipitant == 5] <- "autre"
DF$facteur_precipitant <- as.factor(DF2$facteur_precipitant)
DF$facteur_precipitant <- relevel(DF$facteur_precipitant,"non")
DF$hospitalisation_anterieure[DF$hospitalisation_anterieure == "passage aux UMP"] <- "non"
DF$hospitalisation_anterieure <- as.factor(DF$hospitalisation_anterieure)
relevel(DF$hospitalisation_anterieure,"oui")
DF$mesure_sociale <- NULL
DF$suivi <- NULL
DF$pathologie_somatique <- NULL
##############
colnames(DF)[14] <- "études"
# TABLE 1
table1(DF,"Récidive",ynames=c("Pas de récidive","Récidive")) -> tabf
table(DF$cannabis,DF$Récidive)
# Reglog
DF$relation_famille <- NULL
reglog(DF,"Récidive",method = "forward",keep = c("abus","cannabis","maltraitance","orientation","TS","hospitalisation_anterieure","diagnostic","études"),exit = "excel") -> rslt
y = "Récidive"
DF[,y] <- tobinary(DF[,y])
mod <- glm(formulation(c("Récidive","cannabis","abus","maltraitance","orientation","TS","TTT","hospitalisation_anterieure","diagnostic","études")),family="binomial",data=DF)
summary(mod)
table(DF$conduite_risque,DF$Récidive)
