setwd("~/MEGA/ARTICLES/Packages/autostats")
load("data/description_indiv_decode.rda")
library(dplyr)
library(stats)
library(stringr)
library(xlsx)
##############
data("description_indiv_decode")
DF <- description_indiv_decode
y="sex_PS"
verbose=TRUE
alpha=0.05
###############
source("R/table1.R")
tbf <- table1(DF,y="sex_PS")
tbf
source("R/excel.R")
excel(tbf,title_sheet=NULL,"rslts_table1")
source("R/reglog.R")
tbf <- reglog(DF,y="sex_PS",min_multivariate=2)
tbf
source("R/table1.R")
tbf <- table1(DF,y="sex_PS")
tbf
source("R/table1.R")
tbf <- table1(DF,y="sex_PS")
tbf
source("R/reglog.R")
tbf <- reglog(DF,y="sex_PS",min_multivariate=2)
tbf
source("R/propensity.R")
tbf <- propensity(DF,y="sex_PS",min_multivariate=2)
source("R/propensity.R")
tbf <- propensity(DF,y="sex_PS")
setwd("~/MEGA/ARTICLES/Packages/autostats")
source("R/propensity.R")
tbf <- propensity(DF,y="sex_PS")
source("R/propensity.R")
tbf <- propensity(DF,y="sex_PS")
tbf
tbf
install.packages("ROCR")
library(ROCR)
usethis::use_package(ROCR)
usethis::use_package("ROCR")
DF <- description_indiv_decode
y="sex_PS"
DF[,y]
ncol(DF[!is.na(DF)])
(na.omit(DF))
regression
reglog(DF,y) -> regression
regression
regression[,5]
regression[,5]!= "-"
regression[regression[,5]!= "-"]
regression[,1][regression[,5]!= "-"]
ncol(regression[,1][regression[,5]!= "-"])
regression[,1][regression[,5]!= "-"]
regression
regression[,5]!= "-"]
regression[,5]!= "-"
regression[-1,1][regression[-1,5]!= "-"]
regression
regression[-1,1][regression[-1,5]!= "-"]
print(str_split(col," "))
col
for (col in regression[-1,1][regression[-1,5]!= "-"]){
print(str_split(col," "))
}
for (col in regression[-1,1][regression[-1,5]!= "-"]){
col <- str_split(col," ")[1]
}
col
cols <- vector()
for (col in regression[-1,1][regression[-1,5]!= "-"]){
cols <- str_split(col," ")[[1]]
}
cols
i=0
for (col in regression[-1,1][regression[-1,5]!= "-"]){
i + 1 -> i
cols[i] <- str_split(col," ")[[1]][1]
}
cols
i=0
for (col in regression[-1,1][regression[-1,5]!= "-"]){
i + 1 -> i
cols[i] <- str_split(col," ")[[1]][1]
}
cols
DF[,cols]
DF[,cols][complete.row(DF[,cols])]
DF[,cols][complete.cases(DF[,cols])]
DF[,cols][complete.cases(DF[,cols]),]
regression
DF_propensity
DF[,cols][complete.cases(DF[,cols]),] -> DF_propensity
DF_propensity
DF
DF[,c(y,cols)]
DF[,c(y,cols)] -> DF_propensity
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
for (level in levels_y) {
#replacing levels by 0 or 1
DF_propensity[, y][DF_propensity[, y] == level] <- i
i <- 1 + i
}
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
levels(DF_propensity[, y]) ->levels_y
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
for (level in levels_y) {
#replacing levels by 0 or 1
DF_propensity[, y][DF_propensity[, y] == level] <- i
i <- 1 + i
}
DF_propensity[, y]
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
levels(DF_propensity[, y]) ->levels_y
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
as.data.frame(DF_propensity)
for (level in levels_y) {
#replacing levels by 0 or 1
DF_propensity[, y][DF_propensity[, y] == level] <- i
i <- 1 + i
}
DF_propensity[, y]
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
levels(DF_propensity[, y]) ->levels_y
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
as.data.frame(DF_propensity)
for (level in levels_y) {
#replacing levels by 0 or 1
DF_propensity[, y][DF_propensity[, y] == level] <- i
i <- 1 + i
}
DF_propensity[, y]
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
DF_propensity
DF[,c(y,cols)]
DF <- description_indiv_decode
y="sex_PS"
source("R/reglog.R")
reglog(DF,y) -> regression
cols <- vector()
DF <- description_indiv_decode
##############
data("description_indiv_decode")
DF <- description_indiv_decode
##############
data("description_indiv_decode")
source("R/reglog.R")
reglog(DF,y) -> regression
reglog(DF,y) -> regression
source("R/reglog.R")
reglog(DF,y) -> regression
regression
cols <- vector()
i=0
for (col in regression[-1,1][regression[-1,5]!= "-"]){
i + 1 -> i
cols[i] <- str_split(col," ")[[1]][1]
}
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
as.data.frame(DF_propensity)
as.data.frame(DF_propensity) -> DF_propensity
levels(DF_propensity[, y]) ->levels_y
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
DF_propensity
DF[,c(y,cols)] -> DF_propensity
DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity
as.data.frame(DF_propensity) -> DF_propensity
DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
DF_propensity[, y]
levels(DF_propensity[, y]) ->levels_y
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
DF_propensity
for (level in levels_y) {
#replacing levels by 0 or 1
DF_propensity[, y][DF_propensity[, y] == level] <- i
i <- 1 + i
}
DF_propensity[, y]
as.factor(DF_propensity[, y]) -> DF_propensity[, y]
DF_propensity
level[i] <- str_split(col," ")[[1]][2]
cols <- vector()
level <- vector()
i=0
for (col in regression[-1,1][regression[-1,5]!= "-"]){
i + 1 -> i
cols[i] <- str_split(col," ")[[1]][1]
level[i] <- str_split(col," ")[[1]][2]
}
cols
level
level[i] <- str_split(col," ")[[1]][3]
cols <- vector()
level <- vector()
i=0
for (col in regression[-1,1][regression[-1,5]!= "-"]){
i + 1 -> i
cols[i] <- str_split(col," ")[[1]][1]
level[i] <- str_split(col," ")[[1]][3]
}
level
regression
regression[-1,1][regression[-1,5]!= "-"]
regression[-1,5]
OR <- regression[-1,5][regression[-1,5]!= "-"]
OR
glm(DF_propensity,family = binomial)
summary(glm(DF_propensity,family = binomial))
regression
summary(glm(DF_propensity,family = binomial))
summary(glm(DF_propensity,family = binomial))[1]
summary(glm(DF_propensity,family = binomial))[1] -> logit
logit
summary(glm(DF_propensity,family = binomial))
summary(glm(DF_propensity,family = binomial))[,1] -> logit
summary(glm(DF_propensity,family = binomial))
summary(glm(DF_propensity,family = binomial))$coefficent -> logit
logit
summary(glm(DF_propensity,family = binomial))$coefficents -> logit
logit
summary(glm(DF_propensity,family = binomial))$coefficents
glm(DF_propensity,family = binomial)$coefficents
summary(glm(DF_propensity,family = binomial))$coefficents
glm(DF_propensity,family = binomial)
glm(DF_propensity,family = binomial) -> mod
summary(mod)$coefficents -> logit
logit
summary(mod)$coefficents
summary(mod)
summary(mod)$coefficients -> logit
logit
summary(mod)$coefficients[,1] -> logit
logit
for (coeff in logit){
print(coeff)
}
patient = 2
predicted <- logit[1]#ordonnée à l'origine
predicted
i=1
i+1 -> i
DF[patient,i]
DF_propensity[patient,i]
var()
var
var = x
var ="x"
cat("What method should be applied to",var," ?
1. Omission of ",var," from the model.
2. Changing to a di􏰂erent type of model.
3. Use of an ad hoc adjustment (data manipulation).
4. Exact logistic regression [13].
5. Standard analysis with 􏰀ˆNV",var,"et to a ‘high’ value (for example, the value of 􏰀ˆNV ",var," that iteration at which the log-likelihood changed by less than 10−6).")
choice = 0
choice %in% c(1,2,3,4,5)
choice = 0
while(!(choice %in% c(1,2,3,4,5))){
choice <- readline("\n Choice ? (1,2,3,4,5)")
}
cat("What method should be applied to",var," ?
1. Omission of ",var," from the model.
2. Changing to a different type of model.
3. Use of an ad hoc adjustment (data manipulation).
4. Exact logistic regression [13].
5. Standard analysis with 􏰀ˆNV",var,"et to a ‘high’ value (for example, the value of 􏰀ˆNV ",var," that iteration at which the log-likelihood changed by less than 10−6).")
choice = 0
while(!(choice %in% c(1,2,3,4,5))){
choice <- readline("Choice ? (1,2,3,4,5)")
}
cat("What method should be applied to",var," ?
1. Omission of ",var," from the model.
2. Changing to a different type of model.
3. Use of an ad hoc adjustment (data manipulation).
4. Exact logistic regression [13].
5. Standard analysis with 􏰀ˆNV",var,"et to a ‘high’ value (for example, the value of 􏰀ˆNV ",var," that iteration at which the log-likelihood changed by less than 10−6).")
choice = 0
while(!(choice %in% c(1,2,3,4,5))){
choice <- readline("Choice ? (1,2,3,4,5)\n")
}
cat("What method should be applied to",var," ?
1. Omission of ",var," from the model.
2. Changing to a different type of model.
3. Use of an ad hoc adjustment (data manipulation).
4. Exact logistic regression [13].
5. Standard analysis with 􏰀ˆNV",var,"et to a ‘high’ value (for example, the value of 􏰀ˆNV ",var," that iteration at which the log-likelihood changed by less than 10−6).")
choice = 0
while(!(choice %in% c(1,2,3,4,5))){
choice <- readline("Choice ? (1,2,3,4,5)\n\n")
}
while(!(choice %in% c(1,2,3,4,5))){
choice <- readline("Choice ? (1,2,3,4,5)       ")
}
choice = 0
while(!(choice %in% c(1,2,3,4,5))){
choice <- readline("Choice ? (1,2,3,4,5)       ")
}
###################
#  CHOICES
###################
transform_sepration <- function(var){
cat("What method should be applied to",var," ?
1. Omission of ",var," from the model.
2. Changing to a different type of model.
3. Use of an ad hoc adjustment (data manipulation).
4. Exact logistic regression [13].
5. Standard analysis with 􏰀ˆNV",var,"et to a ‘high’ value (for example, the value of 􏰀ˆNV ",var," that iteration at which the log-likelihood changed by less than 10−6).")#
choice = 0
while(!(choice %in% c(1,2,3,4,5))){
choice <- readline("Choice ? (1,2,3,4,5)       ")
}
}
check_dicotomous(DF)
check_dicotomous <- function(DFex){
table(DFex)-> table
table[1,] ->table0
table[2,] ->table1
table0[table0 !=0] -> value0
table1[table1 !=0] -> value1
as.numeric(names(value0)) -> names_value0
as.numeric(names(value1)) -> names_value1
check <- FALSE
if(TRUE %in% c(is.na(names_value0),is.na(names_value1))){
cat("not all numerics")
}else{
names_value0[order(names_value0)] -> names_value0
names_value1[order(names_value1)] -> names_value1
if(max(names_value0) < min(names_value1)){
check <- TRUE
cat("\n\n",colnames(DFex)[1]," is fully explicated by ",colnames(DFex)[2]," :\n
x = (",trunc(min(names_value0)),":",trunc(min(names_value1)),"[     y = 0
x = (",trunc(min(names_value1)),":",(trunc(max(names_value1))+1),"[     y = 1")
}
if(min(names_value0) > max(names_value1)){
check <- TRUE
cat("\n\n",colnames(DFex)[1]," is fully explicated by ",colnames(DFex)[2]," :\n
x = (",trunc(min(names_value1)),":",trunc(min(names_value0)),"[     y = 1
x = (",trunc(min(names_value0)),":",(trunc(max(names_value0))+1),"[     y = 0")
}
}
return(check)
}
check_dicotomous(DF)
y <- c(0,0,0,0,1,1,1,1)
y <- sort(y,decreasing = T)
x <- c(1,2,3,3,5,6,10,11)
source("R/logit.R")
as.data.frame(cbind(y,x))-> DF
###################
#  CHOICES
###################
transform_sepration <- function(DF,var){
check_dicotomous(DF)
cat("What method should be applied to",var," ?
1. Omission of ",var," from the model.
2. Changing to a different type of model.
3. Use of an ad hoc adjustment (data manipulation).
4. Exact logistic regression [13].
5. Standard analysis with 􏰀ˆNV",var,"et to a ‘high’ value (for example, the value of 􏰀ˆNV ",var," that iteration at which the log-likelihood changed by less than 10−6).")#
choice = 0
while(!(choice %in% c(1,2,3,4,5))){
choice <- readline("Choice ? (1,2,3,4,5)       ")
}
}
check_dicotomous(DF)
check-dichotomous<- check_dicotomous(DF)
check_dichotomous<- check_dicotomous(DF)
var <- colnames(DF)[2]
var
check_dichotomous<- check_dicotomous(DF)
