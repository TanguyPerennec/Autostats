#Allergie
table1::table1(~allergie_principale+famille_allergie_principale+animal+chien...9+chat...10+poule+vache+lapin+autre,data = DF)
#Allergie
DF$allergie_animale <- DF$chien
warnings()
library(readxl)
DF <- read_excel("../../CDD/Hassk47/DF.xlsx", na = c("NC","NA"))
colnames(DF)
#Caractréstiques de la population
table1::table1(~sexe+tabac+exogenose_chronique,data = DF)
#Allergie
DF$allergie_animale <- DF$chien
DF$allergie_animale[DF$allergie_animale == 1] <- "chien"
table1::table1(~allergie_principale+famille_allergie_principale+animal+chien...9+chat...10+poule+vache+lapin+autre,data = DF)
DF$allergie_animale
#Allergie
DF$allergie_animale <- DF$chien
#Allergie
DF$allergie_animale <- DF$chien...9
DF$allergie_animale
library(readxl)
DF <- read_excel("../../CDD/Hassk47/DF.xlsx", na = c("NC","NA"))
colnames(DF)
#Caractréstiques de la population
table1::table1(~sexe+tabac+exogenose_chronique,data = DF)
#Allergie
table1::table1(~allergie_principale+famille_allergie_principale+animal+chien...9+chat...10+poule+vache+lapin+autre,data = DF)
#Caractréstiques de la population
DF[,c(8,14)]
#Caractréstiques de la population
DF[,c(8:14)]
DF <- as.dataframe(read_excel("../../CDD/Hassk47/DF.xlsx", na = c("NC","NA")))
DF <- as.data.frame(read_excel("../../CDD/Hassk47/DF.xlsx", na = c("NC","NA")))
colnames(DF)
#Caractréstiques de la population
as.factor(DF[,c(8:14)])
DF
#Caractréstiques de la population
as.factor(DF[,c(8:14)])
#Caractréstiques de la population
as.factor(DF[,c(8:14)])
colnames(DF)
DF <- as.data.frame(read_excel("../../CDD/Hassk47/DF.xlsx", na = c("NC","NA")))
#Caractréstiques de la population
factor(DF[,c(8:14)])
#Caractréstiques de la population
as.factor(as.numeric(DF[,c(8:14)]))
#Caractréstiques de la population
as.numeric(DF[,c(8:14)])
DF[,c(8:14)]
#Caractréstiques de la population
as.factor(DF[,c(8)])
seq(8,14)
#Caractréstiques de la population
for (i in seq(8,14))
{
as.factor(DF[,i]) -> DF[,i]
}
table1::table1(~sexe+tabac+exogenose_chronique,data = DF)
#Allergie
table1::table1(~allergie_principale+famille_allergie_principale+animal+chien...9+chat...10+poule+vache+lapin+autre,data = DF)
colnames(DF)
#Caractréstiques de la population
table1::table1(~sexe+tabac+exogenose_chronique+age_premiere_reaction+age_diag,data = DF)
library(readxl)
DF <- as.data.frame(read_excel("../../CDD/Hassk47/DF.xlsx", na = c("NC","NA")))
colnames(DF)
for (i in length(DF))
{
if (levels(as.factor(DF[ ,i])) == c(0,1) || levels(as.factor(DF[ ,i])) == c(1,0))
as.factor(DF[ ,i]) -> DF[ ,i]
}
#Caractréstiques de la population
table1::table1(~sexe+tabac+exogenose_chronique+age_premiere_reaction+age_diag,data = DF)
#Allergie
table1::table1(~allergie_principale+famille_allergie_principale+animal+chien...9+chat...10+poule+vache+lapin+autre,data = DF)
as.factor(DF[,8])
levels(as.factor(DF[,8]))
library(readxl)
DF <- as.data.frame(read_excel("../../CDD/Hassk47/DF.xlsx", na = c("NC","NA")))
colnames(DF)
for (i in length(DF))
{
if (levels(as.factor(DF[ ,i])) == c("0","1") || levels(as.factor(DF[ ,i])) == c(1,0))
as.factor(DF[ ,i]) -> DF[ ,i]
}
#Caractréstiques de la population
table1::table1(~sexe+tabac+exogenose_chronique+age_premiere_reaction+age_diag,data = DF)
#Allergie
table1::table1(~allergie_principale+famille_allergie_principale+animal+chien...9+chat...10+poule+vache+lapin+autre,data = DF)
levels(as.factor(DF[,8]))
levels(as.factor(DF[,8])) == c("0","1")
for (i in length(DF))
{
if (!(FALSE %in% levels(as.factor(DF[ ,i])) == c("0","1")))
as.factor(DF[ ,i]) -> DF[ ,i]
}
DF[ ,i]
levels(as.factor(DF[ ,i]))
levels(as.factor(DF[ ,i])) == c("0","1")
(!(FALSE %in% levels(as.factor(DF[ ,i])) == c("0","1")))
for (i in length(DF))
{
if (!(FALSE %in% (levels(as.factor(DF[ ,i])) == c("0","1"))))
{
as.factor(DF[ ,i]) -> DF[ ,i]
}
}
#Caractréstiques de la population
table1::table1(~sexe+tabac+exogenose_chronique+age_premiere_reaction+age_diag,data = DF)
#Allergie
table1::table1(~allergie_principale+famille_allergie_principale+animal+chien...9+chat...10+poule+vache+lapin+autre,data = DF)
DF[ ,i]
for (i in 1:length(DF))
{
if (!(FALSE %in% (levels(as.factor(DF[ ,i])) == c("0","1"))))
{
as.factor(DF[ ,i]) -> DF[ ,i]
}
}
#Caractréstiques de la population
table1::table1(~sexe+tabac+exogenose_chronique+age_premiere_reaction+age_diag,data = DF)
#Allergie
table1::table1(~allergie_principale+famille_allergie_principale+animal+chien...9+chat...10+poule+vache+lapin+autre,data = DF)
#Caractréstiques de la population
table1::table1(~sexe+tabac+exogenose_chronique+IC_chronique+IRespi_chronique+IRenale_chronique+Crohn_RCH+MAI+cancer+HTA+diabete_2+atopie+DA+urticaire_chronque+asthme+polypose+widal+rhinoconjonctivite_chronique+troubles_dig_chroniques+oesophagite_eosino...111+age_premiere_reaction+age_diag,data = DF)
#Caractréstiques de la population
table1::table1(~sexe+tabac+exogenose_chronique+IC_chronique+IRespi_chronique+IRenale_chronique+Crohn_RCH+MAI+cancer+HTA+diabete_2+atopie+DA...104+urticaire_chronque+asthme+polypose+widal+rhinoconjonctivite_chronique+troubles_dig_chroniques+oesophagite_eosino...111+age_premiere_reaction+age_diag,data = DF)
#Caractréstiques de la population
table1::table1(~sexe+tabac+exogenose_chronique+IC_chronique+IRespi_chronique+IRenale_chronique+Crohn_RCH+MAI+cancer+HTA+diabete_2+atopie+DA...104+urticaire_chronique+asthme+polypose+widal+rhinoconjonctivite_chronique+troubles_dig_chroniques+oesophagite_eosino...111+age_premiere_reaction+age_diag,data = DF)
#Allergie
table1::table1(~allergie_principale+famille_allergie_principale+animal+chien...9+chat...10+poule+vache+lapin+autre,data = DF)
reglog(DF,y)
library(autostats)
reglog(DF,y)
y = "AA_aggravee"
reglog(DF,y)
DF$y
DF[,y]
reglog(DF,y)
library(autostats)
reglog(DF,y)
if (missing(y))
y <- colnames(DF)[1]
if (!is.character(y) || !(y %in% colnames(DF)))
stop("y must be a character variable, part of DF")
## Explicatives
if (missing(explicatives))
explicatives <- colnames(DF)[colnames(DF) != y]
explicatives <- colnames(DF)[colnames(DF) != y]
# Removes explicatives not in DF
explicatives_out_DF <- explicatives[!(explicatives %in% colnames(DF))]
if (length(explicatives_out_DF) > 0)
{
msg_error <- explicatives_out_DF[1]
if (length(explicatives_out_DF) > 1)
{
for (expl_out_DF in explicatives_out_DF[-1])
{
msg_error <- paste0(msg_error, ", ", expl_out_DF)
}
msg_error <- paste0(msg_error, " are not part of DF columns")
} else{
msg_error <- paste0(msg_error, " is not part of DF columns")
}
msg_error <- paste(msg_error," ; maybe you should also check on wether the colnames are uniques")
stop(msg_error)
}
# Removes y from explicatives
if (y %in% explicatives)
{
message('y is part of "explicatives" and is removed from it')
explicatives <- explicatives[explicatives != y]
}
explicative2 <- explicatives
## Dataframe
if (is.data.frame(DF) || is.matrix(DF) || is.tbl(DF))
{
DF <- as.data.frame(DF,row.names = NULL)
if (make.names(colnames(DF)) != colnames(DF))
{
message("column names are not valid, 'make.names()' is used to have valid colnames")
make.names(colnames(DF)) -> colnames(DF)
make.names(explicatives) -> explicatives
make.names(y) -> y
}
} else
{
stop("No dataframe has been provided. Make sure 'DF' is a dataframe, a tibble or a matrix")
}
if (!is.logical(verbose))
stop("'verbose' must be logical")
verbose=T
if (!is.logical(verbose))
stop("'verbose' must be logical")
verbose -> verbose2
if (!is.numeric(round) || round <= 0)
stop("round must be numeric and positive")
round = 3
rowstimevariable = 10
confirmation=FALSE
keep=FALSE
exit = "excel"
# Removes y from explicatives
if (y %in% explicatives)
{
message('y is part of "explicatives" and is removed from it')
explicatives <- explicatives[explicatives != y]
}
explicative2 <- explicatives
## Dataframe
if (is.data.frame(DF) || is.matrix(DF) || is.tbl(DF))
{
DF <- as.data.frame(DF,row.names = NULL)
if (make.names(colnames(DF)) != colnames(DF))
{
message("column names are not valid, 'make.names()' is used to have valid colnames")
make.names(colnames(DF)) -> colnames(DF)
make.names(explicatives) -> explicatives
make.names(y) -> y
}
} else
{
stop("No dataframe has been provided. Make sure 'DF' is a dataframe, a tibble or a matrix")
}
if (!is.logical(verbose))
stop("'verbose' must be logical")
verbose -> verbose2
if (!is.numeric(round) || round <= 0)
stop("round must be numeric and positive")
round -> round2
if (!is.logical(confirmation))
stop("'confirmation' must be logical")
confirmation -> confirmation2
if (!is.logical(keep))
{
if (!is.character(keep) & !is.vector(keep))
stop("keep should be a vector of character or characters")
if (FALSE %in% (keep %in% explicatives))
stop("some of keep elements are not in 'explicatives'")
}
keep -> keep2
##################################################
#               1) DATA CLEANING                 #
##################################################
if (verbose) cat("
\n
\n
-----+-----------------------------+--------------------------------------------------------------------------------------------
|                             |
|      1) DATA CLEANING       |
|                             |
+-----------------------------+\n")
DF <- data_prep_complete(DF,y,verbose = TRUE,keep = keep2)
explicatives <- colnames(DF)[colnames(DF) != y]
##################################################
keep -> variable_to_keep
DF <- as.data.frame(DF)
DF1 <- DF
# Caractere preparation
DF <- format_data(DF)
# Data prep of y
DF[,y] <- tobinary(DF[,y])
# get rid of NAs
DF <- NA_rm_for_glm(DF,y,keep = variable_to_keep)
EPV = 10
min_explicatives = 0.1*(ncol(DF))
floor_pval = 0.5
verbose = TRUE
method_NA = c("lessNA", "significance")
keep = FALSE
kNN = NULL
rf = NULL
median = NULL
mean=NULL
NA_as_level = NULL
DF <- as.data.frame(DF)
explicatives1 <- colnames(DF)[colnames(DF) != y]
DF_complete <- DF[complete.cases(DF),]
explicatives <- colnames(DF)[colnames(DF) != y]
if (!is.null(kNN))
{
DF_complete <- suppressWarnings(VIM::kNN(DF,variable = kNN))
}
if (!is.null(rf))
{
DF_complete <- suppressWarnings(missForest::missForest(DF))
}
if (!is.null(median))
{
DF -> DF_complete
for (col in median)
{
DF_complete[,col][is.na(DF_complete[,col])] <- stats::median(DF[,col],na.rm = TRUE)
}
}
if (!is.null(mean))
{
DF -> DF_complete
for (col in mean)
{
DF_complete[,col][is.na(DF_complete[,col])] <- stats::mean(DF[,col],na.rm = TRUE)
}
}
if (!is.null(NA_as_level))
{
DF -> DF_complete
for (col in NA_as_level)
{
DF_complete[,col][is.na(DF_complete[,col])] <- "NC"
}
}
if (!is.null(method_NA))
{
#Calculating EPV
events <- min(table(DF[,y]))
variables <- length(DF_complete)
actualEPV <- events/variables
if (actualEPV < EPV)
{
nb_NA <- apply(DF[, explicatives], 2, function(x) sum(is.na(x))) #nb NA by columns
if (!is.logical(keep)) nb_NA <- nb_NA[!(keep %in% names(nb_NA))]
nb_NA <- nb_NA[order(-nb_NA)]
i = 1
if ("significance" %in% method_NA)
{
for (var in names(nb_NA))
{
DF_uni <- DF[, c(y, var)]
DF_uni <- DF_uni[complete.cases(DF_uni),]
if (nrow(DF_uni) < 5 || length(levels(as.factor(DF_uni[,2]))) < 2)
{
explicatives <- explicatives[explicatives != var]
}else
{
model <- stats::glm(formula = DF_uni[,y]~DF_uni[,var],family = "binomial")
p_valanova <- anova(model,formula(DF_uni[,y]~1),test = "Chisq")$Pr[2]
if (p_valanova > floor_pval)
{#if all pvals are > 0.5
explicatives <- explicatives[explicatives != var]
if (verbose)
cat("\n\n\n",var," is non significant with overall population (",floor_pval," threeshold) and is deleted")
}
}
}
}
DF <- DF[,c(y,explicatives)]
DF_complete <- DF[complete.cases(DF),]
if ("lessNA" %in% method_NA & sum(is.na(DF)) > 0 )
{
while (nrow(DF_complete) < EPV * length(DF_complete) & (length(explicatives) > min_explicatives) & i < length(nb_NA))
{
nb_NA <- apply(DF[, explicatives], 2, function(x) sum(is.na(x))) #nb NA by columns
nb_NA <- nb_NA[!(keep %in% names(nb_NA))]
nb_NA <- nb_NA[order(-nb_NA)]
nb_NA <- nb_NA[nb_NA > 0]
explicatives <- explicatives[explicatives != names(nb_NA[1])]
progressbar(i = i,variable = names(nb_NA[1]),text = "Deleting columns... ",range = 5)
DF <- DF[ ,c(y, explicatives)]
DF_complete <- DF[complete.cases(DF), ]
i <- i + 1
}
}
}
}
for (var in names(nb_NA))
{
DF_uni <- DF[, c(y, var)]
DF_uni <- DF_uni[complete.cases(DF_uni),]
if (nrow(DF_uni) < 5 || length(levels(as.factor(DF_uni[,2]))) < 2)
{
explicatives <- explicatives[explicatives != var]
}else
{
model <- stats::glm(formula = DF_uni[,y]~DF_uni[,var],family = "binomial")
p_valanova <- anova(model,formula(DF_uni[,y]~1),test = "Chisq")$Pr[2]
if (p_valanova > floor_pval)
{#if all pvals are > 0.5
explicatives <- explicatives[explicatives != var]
if (verbose)
cat("\n\n\n",var," is non significant with overall population (",floor_pval," threeshold) and is deleted")
}
}
}
DF_uni <- DF[, c(y, var)]
DF_uni <- DF_uni[complete.cases(DF_uni),]
if (nrow(DF_uni) < 5 || length(levels(as.factor(DF_uni[,2]))) < 2)
{
explicatives <- explicatives[explicatives != var]
}else
{
model <- stats::glm(formula = DF_uni[,y]~DF_uni[,var],family = "binomial")
p_valanova <- anova(model,formula(DF_uni[,y]~1),test = "Chisq")$Pr[2]
if (p_valanova > floor_pval)
{#if all pvals are > 0.5
explicatives <- explicatives[explicatives != var]
if (verbose)
cat("\n\n\n",var," is non significant with overall population (",floor_pval," threeshold) and is deleted")
}
}
length(levels(as.factor(DF_uni[,2]))) < 2
levels(as.factor(DF_uni[,2]))
DF_uni[,2]
table(DF_uni[,2]))
table(DF_uni[,2])
table(DF_uni[ ,2])[1]
table(DF_uni[ ,2])[2,1]
table(DF_uni[ ,2])[,1]
table(DF_uni[ ,2])[1] > 4
0 %in% table(DF_uni[ ,2])
library(autostats)
y = "AA_aggravee"
library(autostats)
DF[,y]
reglog(DF,y)
colnames(DF)
reglog(DF,y,explicatives = c("MAI","cancer")
)
reglog(DF,y,explicatives=c("MAI","cancer"))
reglog(DF,y,"MAI")
reglog(DF,y,explicatives = "MAI")
library(autostats)
reglog(DF,y,explicatives = "MAI")
devtools::load_all(".")
reglog(DF,y,explicatives = "MAI")
library(autostats)
reglog(DF,y,explicatives = "MAI")
reglog(DF,y,explicatives = 3)
remove.packages("autostats")
DF
knitr::opts_chunk$set(echo = TRUE)
library(autostats)
library(kableExtra)
set.seed(2)
prob_inf = 0.2
prob_sup = 0.8
### SIMULATION OF A DATASET (WITHOUT Y)
simulate_dataset <- function(
N=100,#number of row in the dataset
n_variables=5,#number of variable to simulate
n_variables_num = 0 #number of numeric variable
)
{
# construction of variables
variables_list = list()
vect_proba = vector()
#Construction of numeric variables
if (n_variables_num > 0)
{
for (i in seq(n_variables_num))
{
variables_list[[i]] <- rnorm(N,mean = 0,1)
}
} else {
i = 1
}
# other variables
for (j in i:n_variables)
{
modalities <- 2 # number of modalities in each variable
proba <- runif(1) # generation of the binomial parameter 'proba' according to a uniform law
vect_proba[j] <- proba
variables_list[[j]] <- rbernoulli(N,proba) # generation of the values of the variable (the columns of the dataset)
}
DF <- matrix(nrow = N,ncol = n_variables)
for (ncol in seq(n_variables))
{
variables_list[[ncol]] -> DF[,ncol] # generation of the dataset by binding the columns of the variables
}
as.data.frame(DF) -> DF
reslt <- list()
DF -> reslt$DF
vect_proba -> reslt$probas
return(reslt)
}
# Meaningful variables
simulation1 <- simulate_dataset(100,5,0)
OR_vect = c(0.4,6,0.5,3,1.2)
coeffs_vect <- log(OR_vect)
intercept = 1
prob = 1
n = 1
y_var = vector()
while (prob < prob_inf || prob > prob_sup)
{
partial_equation = intercept
for (variable in seq(ncol(simulation1$DF)))
{
partial_equation <- partial_equation + ifelse(simulation1$DF[ ,variable],coeffs_vect[variable],0)
}
y <-  exp(partial_equation)/(1 + exp(partial_equation))
prob = mean(y)
(mean(prob_inf,prob_sup) - prob)*10*log(n + 1) -> coeff
intercept <- intercept + (coeff * abs(intercept))
cat(paste0("intercept = ",intercept))
n <-  n + 1
}
for (var in seq(y))
{
y_var[var] <- rbernoulli(1,y[var])
}
DF <- cbind(y_var, simulation1$DF)
DF
# Not meningful factors
simulate_dataset(100,3)$DF -> DF2
colnames(DF2) <- c("interact1","interact2","interact3")
#Bind all variables
cbind(DF,DF2) -> DF
DF %>% kable() %>%
kable_styling(fixed_thead = T,bootstrap_options = c("striped", "hover", "condensed")) %>% scroll_box(height = '200px')
rslt <- reglog(DF,"y_var")
library(autostats)
