setwd("~/MEGA/ARTICLES/Packages/autostats")
load("data/description_indiv_decode.rda")
library(dplyr)
library(stats)
library(stringr)
library(xlsx)
##############
data("description_indiv_decode")
DF <- description_indiv_decode
y="sex_PS"
verbose=TRUE
alpha=0.05
###############
source("R/table1.R")
tbf <- table1(DF,y="sex_PS")
tbf
source("R/excel.R")
excel(tbf,title_sheet=NULL,"rslts_table1")
source("R/reglog.R")
tbf <- reglog(DF,y="sex_PS",min_multivariate=2)
tbf
source("R/table1.R")
tbf <- table1(DF,y="sex_PS")
tbf
source("R/table1.R")
tbf <- table1(DF,y="sex_PS")
tbf
source("R/reglog.R")
tbf <- reglog(DF,y="sex_PS",min_multivariate=2)
tbf
source("R/propensity.R")
tbf <- propensity(DF,y="sex_PS",min_multivariate=2)
source("R/propensity.R")
tbf <- propensity(DF,y="sex_PS")
setwd("~/MEGA/ARTICLES/Packages/autostats")
source("R/propensity.R")
tbf <- propensity(DF,y="sex_PS")
source("R/propensity.R")
tbf <- propensity(DF,y="sex_PS")
tbf
tbf
install.packages("ROCR")
library(ROCR)
usethis::use_package(ROCR)
usethis::use_package("ROCR")
DF <- description_indiv_decode
y="sex_PS"
DF[,y]
ncol(DF[!is.na(DF)])
(na.omit(DF))
regression
reglog(DF,y) -> regression
regression
regression[,5]
regression[,5]!= "-"
regression[regression[,5]!= "-"]
regression[,1][regression[,5]!= "-"]
ncol(regression[,1][regression[,5]!= "-"])
regression[,1][regression[,5]!= "-"]
regression
regression[,5]!= "-"]
regression[,5]!= "-"
regression[-1,1][regression[-1,5]!= "-"]
regression
regression[-1,1][regression[-1,5]!= "-"]
print(str_split(col," "))
col
for (col in regression[-1,1][regression[-1,5]!= "-"]){
print(str_split(col," "))
}
for (col in regression[-1,1][regression[-1,5]!= "-"]){
col <- str_split(col," ")[1]
}
col
cols <- vector()
for (col in regression[-1,1][regression[-1,5]!= "-"]){
cols <- str_split(col," ")[[1]]
}
cols
i=0
for (col in regression[-1,1][regression[-1,5]!= "-"]){
i + 1 -> i
cols[i] <- str_split(col," ")[[1]][1]
}
cols
i=0
for (col in regression[-1,1][regression[-1,5]!= "-"]){
i + 1 -> i
cols[i] <- str_split(col," ")[[1]][1]
}
cols
DF[,cols]
DF[,cols][complete.row(DF[,cols])]
DF[,cols][complete.cases(DF[,cols])]
DF[,cols][complete.cases(DF[,cols]),]
regression
DF_propensity
DF[,cols][complete.cases(DF[,cols]),] -> DF_propensity
DF_propensity
DF
DF[,c(y,cols)]
DF[,c(y,cols)] -> DF_propensity
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
for (level in levels_y) {
#replacing levels by 0 or 1
DF_propensity[, y][DF_propensity[, y] == level] <- i
i <- 1 + i
}
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
levels(DF_propensity[, y]) ->levels_y
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
for (level in levels_y) {
#replacing levels by 0 or 1
DF_propensity[, y][DF_propensity[, y] == level] <- i
i <- 1 + i
}
DF_propensity[, y]
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
levels(DF_propensity[, y]) ->levels_y
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
as.data.frame(DF_propensity)
for (level in levels_y) {
#replacing levels by 0 or 1
DF_propensity[, y][DF_propensity[, y] == level] <- i
i <- 1 + i
}
DF_propensity[, y]
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
levels(DF_propensity[, y]) ->levels_y
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
as.data.frame(DF_propensity)
for (level in levels_y) {
#replacing levels by 0 or 1
DF_propensity[, y][DF_propensity[, y] == level] <- i
i <- 1 + i
}
DF_propensity[, y]
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
DF_propensity
DF[,c(y,cols)]
DF <- description_indiv_decode
y="sex_PS"
source("R/reglog.R")
reglog(DF,y) -> regression
cols <- vector()
DF <- description_indiv_decode
##############
data("description_indiv_decode")
DF <- description_indiv_decode
##############
data("description_indiv_decode")
source("R/reglog.R")
reglog(DF,y) -> regression
reglog(DF,y) -> regression
source("R/reglog.R")
reglog(DF,y) -> regression
regression
cols <- vector()
i=0
for (col in regression[-1,1][regression[-1,5]!= "-"]){
i + 1 -> i
cols[i] <- str_split(col," ")[[1]][1]
}
DF[,c(y,cols)] -> DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
as.data.frame(DF_propensity)
as.data.frame(DF_propensity) -> DF_propensity
levels(DF_propensity[, y]) ->levels_y
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
DF_propensity
DF[,c(y,cols)] -> DF_propensity
DF_propensity
DF_propensity[complete.cases(DF_propensity),] -> DF_propensity
DF_propensity
as.data.frame(DF_propensity) -> DF_propensity
DF_propensity
DF_propensity[, y] <-  as.factor(DF_propensity[, y])
DF_propensity[, y]
levels(DF_propensity[, y]) ->levels_y
DF_propensity[, y] <-  as.character(DF_propensity[, y])
i = 0
DF_propensity
for (level in levels_y) {
#replacing levels by 0 or 1
DF_propensity[, y][DF_propensity[, y] == level] <- i
i <- 1 + i
}
DF_propensity[, y]
as.factor(DF_propensity[, y]) -> DF_propensity[, y]
DF_propensity
level[i] <- str_split(col," ")[[1]][2]
cols <- vector()
level <- vector()
i=0
for (col in regression[-1,1][regression[-1,5]!= "-"]){
i + 1 -> i
cols[i] <- str_split(col," ")[[1]][1]
level[i] <- str_split(col," ")[[1]][2]
}
cols
level
level[i] <- str_split(col," ")[[1]][3]
cols <- vector()
level <- vector()
i=0
for (col in regression[-1,1][regression[-1,5]!= "-"]){
i + 1 -> i
cols[i] <- str_split(col," ")[[1]][1]
level[i] <- str_split(col," ")[[1]][3]
}
level
regression
regression[-1,1][regression[-1,5]!= "-"]
regression[-1,5]
OR <- regression[-1,5][regression[-1,5]!= "-"]
OR
glm(DF_propensity,family = binomial)
summary(glm(DF_propensity,family = binomial))
regression
summary(glm(DF_propensity,family = binomial))
summary(glm(DF_propensity,family = binomial))[1]
summary(glm(DF_propensity,family = binomial))[1] -> logit
logit
summary(glm(DF_propensity,family = binomial))
summary(glm(DF_propensity,family = binomial))[,1] -> logit
summary(glm(DF_propensity,family = binomial))
summary(glm(DF_propensity,family = binomial))$coefficent -> logit
logit
summary(glm(DF_propensity,family = binomial))$coefficents -> logit
logit
summary(glm(DF_propensity,family = binomial))$coefficents
glm(DF_propensity,family = binomial)$coefficents
summary(glm(DF_propensity,family = binomial))$coefficents
glm(DF_propensity,family = binomial)
glm(DF_propensity,family = binomial) -> mod
summary(mod)$coefficents -> logit
logit
summary(mod)$coefficents
summary(mod)
summary(mod)$coefficients -> logit
logit
summary(mod)$coefficients[,1] -> logit
logit
for (coeff in logit){
print(coeff)
}
patient = 2
predicted <- logit[1]#ordonnée à l'origine
predicted
i=1
i+1 -> i
DF[patient,i]
DF_propensity[patient,i]
